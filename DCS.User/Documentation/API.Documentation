<?xml version="1.0"?>
<doc>
    <assembly>
        <name>DCS.User</name>
    </assembly>
    <members>
        <member name="T:DCS.User.CryptographyHelper">
            <summary>
            Provides methods for encrypting, decrypting, and hashing strings.
            </summary>
        </member>
        <member name="M:DCS.User.CryptographyHelper.EncryptString(System.String,System.String)">
            <summary>
            Encrypts a string using AES encryption with a password.
            </summary>
            <param name="clearText">The string to be encrypted.</param>
            <param name="Password">The password used for encryption.</param>
            <returns>The encrypted string in Base64 format.</returns>
        </member>
        <member name="M:DCS.User.CryptographyHelper.DecryptString(System.String,System.String)">
            <summary>
            Decrypts a string using AES decryption with a password.
            </summary>
            <param name="cipherText">The encrypted string in Base64 format.</param>
            <param name="Password">The password used for decryption.</param>
            <returns>The decrypted string.</returns>
        </member>
        <member name="M:DCS.User.CryptographyHelper.HashSHA256(System.String)">
            <summary>
            Hashes a string using SHA256.
            </summary>
            <param name="toHash">raw password to hash.</param>
            <returns>SHA256 hashed string.</returns>
        </member>
        <member name="M:DCS.User.CryptographyHelper.HashSHA256(System.String,System.Text.Encoding)">
            <summary>
            Hashes a string using SHA256 with the specified encoding.
            </summary>
            <param name="toHash">The string to hash.</param>
            <param name="encoding">The encoding to use.</param>
            <returns>The SHA256 hashed string.</returns>
        </member>
        <member name="T:DCS.User.IGroupRepository">
            <summary>
            Represents the repository for managing <see cref="T:DCS.User.Group"/> entities in the database.
            </summary>
        </member>
        <member name="M:DCS.User.IGroupRepository.GetByName(System.String)">
            <summary>
            Retrieves a group by its name.
            </summary>
            <param name="groupName">The name of the group to retrieve. This value cannot be null or empty.</param>
            <returns>The <see cref="T:DCS.User.Group"/> object that matches the specified name, or <see langword="null"/> if no group with
            the given name exists.</returns>
        </member>
        <member name="T:DCS.User.IOrganisationRepository">
            <summary>
            Represents the repository for managing <see cref="T:DCS.User.Organisation"/> entities in the database.
            </summary>
        </member>
        <member name="M:DCS.User.IOrganisationRepository.GetByName(System.String)">
            <summary>
            Gets an organisation by its name.
            </summary>
            <param name="organisationName">The name of the organisation.</param>
            <returns>The organisation with the specified name, or null if not found.</returns>
        </member>
        <member name="T:DCS.User.IRoleRepository">
            <summary>
            Represents the repository to manage <see cref="T:DCS.User.Role"/> entities in the database.
            </summary>
        </member>
        <member name="M:DCS.User.IRoleRepository.GetByName(System.String)">
            <summary>
            Retrieves a role by its name.
            </summary>
            <param name="roleName">The name of the role to retrieve. This value is case-sensitive and cannot be null or empty.</param>
            <returns>The <see cref="T:DCS.User.Role"/> object that matches the specified name, or <see langword="null"/> if no matching role
            is found.</returns>
        </member>
        <member name="T:DCS.User.IUserAssignementRepository">
            <summary>
            Represents the repository for managing user assignments on the table.
            </summary>
        </member>
        <member name="M:DCS.User.IUserAssignementRepository.GetByUserAndGroup(System.Guid,System.Guid)">
            <summary>
            Retrieves the user assignment associated with the specified user and group.
            </summary>
            <param name="userGuid">The unique identifier of the user.</param>
            <param name="groupGuid">The unique identifier of the group.</param>
            <returns>The <see cref="T:DCS.User.UserAssignement"/> object representing the assignment between the specified user and group,
            or <see langword="null"/> if no such assignment exists.</returns>
        </member>
        <member name="M:DCS.User.IUserAssignementRepository.GetByUserAndOrganisation(System.Guid,System.Guid)">
            <summary>
            Retrieves the user assignment associated with the specified user and organization.
            </summary>
            <param name="userGuid">The unique identifier of the user.</param>
            <param name="organisationGuid">The unique identifier of the organization.</param>
            <returns>The <see cref="T:DCS.User.UserAssignement"/> object representing the assignment for the specified user and
            organization. Returns <see langword="null"/> if no assignment exists.</returns>
        </member>
        <member name="M:DCS.User.IUserAssignementRepository.GetByUserAndRole(System.Guid,System.Guid)">
            <summary>
            Retrieves the user assignment associated with the specified user and role.
            </summary>
            <param name="userGuid">The unique identifier of the user.</param>
            <param name="roleGuid">The unique identifier of the role.</param>
            <returns>The <see cref="T:DCS.User.UserAssignement"/> object representing the assignment of the user to the role,  or <see
            langword="null"/> if no such assignment exists.</returns>
        </member>
        <member name="T:DCS.User.IUserDomainRepository">
            <summary>
            Defines a contract for a repository that manages <see cref="T:DCS.User.UserDomain"/> entities, identified by a <see
            cref="T:System.Guid"/>.
            </summary>
            <remarks>This interface extends <see cref="T:DCS.CoreLib.IRepositoryBase`2"/> to provide repository
            functionality  specific to <see cref="T:DCS.User.UserDomain"/> entities. It serves as a domain-level abstraction for user-related
            data operations.</remarks>
        </member>
        <member name="T:DCS.User.IUserRepository">
            <summary>
            UserRepository to handle user data on the table.
            </summary>
        </member>
        <member name="M:DCS.User.IUserRepository.GetByName(System.String)">
            <summary>
            Gets a user by its given user name.
            </summary>
            <param name="userName">Given user name.</param>
            <returns>User by user name.</returns>
            <exception cref="T:System.ArgumentNullException">Gets thrown if given UserName is null or empty."</exception>
        </member>
        <member name="M:DCS.User.IUserRepository.CheckForKeepLoggedIn">
            <summary>
            Checks if any user has flag for auto login.
            </summary>
            <returns>KeepLoggedIn user.</returns>
        </member>
        <member name="M:DCS.User.IUserRepository.SetKeepLoggedIn(DCS.User.User)">
            <summary>
            Set keep logged in flag for user.
            </summary>
            <param name="user">User to keep logged in.</param>
            <returns>Wether setting the flag was susccesfull.</returns>
        </member>
        <member name="M:DCS.User.IUserRepository.UnsetKeepLoggedIn(DCS.User.User)">
            <summary>
            Set keep logged in to flase for given user.
            </summary>
            <param name="user">User to unset keep logged in.</param>
            <returns>Wether setting flag to false was succesfull.</returns>
        </member>
        <member name="T:DCS.User.IGroupService">
            <summary>
            Represents the GroupService for <see cref="T:DCS.User.Group"/> entities.
            </summary>
        </member>
        <member name="M:DCS.User.IGroupService.CreateGroup(System.String,System.String,System.Boolean,System.Guid)">
            <summary>
            Creates a new group with the specified name, description, and status, and associates it with the specified
            user.
            </summary>
            <param name="name">The name of the group. This value cannot be null or empty.</param>
            <param name="description">A description of the group. This value can be null or empty.</param>
            <param name="isActive">A value indicating whether the group is active.</param>
            <param name="userGuid">The unique identifier of the user creating the group. This value must not be <see cref="F:System.Guid.Empty"/>.</param>
            <returns>A <see cref="T:DCS.User.Group"/> object representing the newly created group.</returns>
        </member>
        <member name="T:DCS.User.IOrganisationService">
            <summary>
            Represents the organisation service with basic methods inherited from <see cref="T:DCS.User.IOrganisationRepository"/> to handle organisation data.
            </summary>
        </member>
        <member name="M:DCS.User.IOrganisationService.CreateOrganisation(System.String,System.String,System.Boolean,System.Guid)">
            <summary>
            Creates a new organisation with the specified name, description, and status.
            </summary>
            <param name="name">The name of the organisation. Cannot be null or empty.</param>
            <param name="description">A brief description of the organisation. Can be null or empty.</param>
            <param name="isActive">A value indicating whether the organisation is active.</param>
            <param name="userGuid">The unique identifier of the user creating the organisation. Must be a valid <see cref="T:System.Guid"/>.</param>
            <returns>An <see cref="T:DCS.User.Organisation"/> object representing the newly created organisation.</returns>
        </member>
        <member name="T:DCS.User.IRoleService">
            <summary>
            Represents the service for managing <see cref="T:DCS.User.Role"/> entities.
            </summary>
        </member>
        <member name="M:DCS.User.IRoleService.CreateRole(System.String,System.String,System.Boolean,System.Guid)">
            <summary>
            Creates a new role with the specified name, description, and status, and associates it with the specified
            user.
            </summary>
            <param name="name">The name of the role. This value cannot be null or empty.</param>
            <param name="description">A description of the role. This value can be null or empty.</param>
            <param name="isActive">A value indicating whether the role is active.</param>
            <param name="userGuid">The unique identifier of the user associated with the role.</param>
            <returns>The newly created <see cref="T:DCS.User.Role"/> instance.</returns>
        </member>
        <member name="T:DCS.User.IUserAssignementService">
            <summary>
            Represents the service for managing user assignments.
            </summary>
        </member>
        <member name="M:DCS.User.IUserAssignementService.AddUserToGroup(System.Guid,System.Guid)">
            <summary>
            Adds a user to a specified group.
            </summary>
            <remarks>This method does not throw an exception if the user is already a member of the group
            or if the group does not exist. Instead, it returns <see langword="false"/> in such cases.</remarks>
            <param name="userGuid">The unique identifier of the user to be added to the group.</param>
            <param name="groupGuid">The unique identifier of the group to which the user will be added.</param>
            <returns><see langword="true"/> if the user was successfully added to the group; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:DCS.User.IUserAssignementService.RemoveUserFromGroup(DCS.User.UserAssignement)">
            <summary>
            Removes a user from the specified group.
            </summary>
            <remarks>This method will return <see langword="false"/> if the user is not a member of the
            specified group.</remarks>
            <param name="userAssignement">An object containing the user and group information for the removal operation.</param>
            <returns><see langword="true"/> if the user was successfully removed from the group; otherwise, <see
            langword="false"/>.</returns>
        </member>
        <member name="M:DCS.User.IUserAssignementService.AddUserToOrganisation(System.Guid,System.Guid)">
            <summary>
            Adds a user to the specified organization.
            </summary>
            <remarks>This method does not allow duplicate user entries for the same organization. If the
            user is already a member of the specified organization, the method will return <see
            langword="false"/>.</remarks>
            <param name="userGuid">The unique identifier of the user to be added.</param>
            <param name="organisationGuid">The unique identifier of the organization to which the user will be added.</param>
            <returns><see langword="true"/> if the user was successfully added to the organization; otherwise, <see
            langword="false"/>.</returns>
        </member>
        <member name="M:DCS.User.IUserAssignementService.RemoveUserFromOrganisation(DCS.User.UserAssignement)">
            <summary>
            Removes a user from the specified organization.
            </summary>
            <remarks>The operation will fail if the user is not currently assigned to the specified
            organization. Ensure that the <paramref name="userAssignement"/> parameter is not <see langword="null"/> and
            contains valid data.</remarks>
            <param name="userAssignement">An object containing the details of the user and the organization from which the user should be removed.</param>
            <returns><see langword="true"/> if the user was successfully removed from the organization; otherwise, <see
            langword="false"/>.</returns>
        </member>
        <member name="M:DCS.User.IUserAssignementService.AddUserToRole(System.Guid,System.Guid)">
            <summary>
            Adds a user to a specified role.
            </summary>
            <remarks>This method associates the specified user with the specified role. If the user is
            already a member of the role,  the method returns <see langword="false"/> without making any
            changes.</remarks>
            <param name="userGuid">The unique identifier of the user to be added to the role.</param>
            <param name="roleGuid">The unique identifier of the role to which the user will be added.</param>
            <returns><see langword="true"/> if the user was successfully added to the role; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:DCS.User.IUserAssignementService.RemoveUserFromRole(DCS.User.UserAssignement)">
            <summary>
            Removes a user from the specified role.
            </summary>
            <remarks>This method does not throw an exception if the user is not currently assigned to the
            specified role. Ensure that the <paramref name="userAssignement"/> parameter is not <see langword="null"/>
            and contains valid user and role data.</remarks>
            <param name="userAssignement">An object containing the user and role information to be removed.</param>
            <returns><see langword="true"/> if the user was successfully removed from the role; otherwise, <see
            langword="false"/>.</returns>
        </member>
        <member name="T:DCS.User.IUserDomainService">
            <summary>
            Defines the contract for domain-level operations related to user management.
            </summary>
            <remarks>This interface extends <see cref="T:DCS.User.IUserDomainRepository"/> to include additional
            domain-specific behaviors and rules for managing users. Implementations of this interface should encapsulate
            business logic that operates on user entities, ensuring consistency and enforcing domain constraints.</remarks>
        </member>
        <member name="T:DCS.User.IUserService">
            <summary>
            UserService to manipulate user data.
            </summary>
        </member>
        <member name="M:DCS.User.IUserService.GetSha256Hash(System.String)">
            <summary>
            Gets the Sha256 hash for the user password.
            </summary>
            <param name="rawPassword">User password.</param>
            <returns>Sha256 hashed user password.</returns>
        </member>
        <member name="T:DCS.User.Group">
            <summary>
            Represents the user group class.
            </summary>
        </member>
        <member name="M:DCS.User.Group.#ctor">
            <summary>
            Default constructor for <see cref="T:DCS.User.Group"/> instances.
            </summary>
        </member>
        <member name="P:DCS.User.Group.Guid">
            <summary>
            Group unique identifier.
            </summary>
        </member>
        <member name="P:DCS.User.Group.Ident">
            <summary>
            Group ident.
            </summary>
        </member>
        <member name="P:DCS.User.Group.Name">
            <summary>
            Group name.
            </summary>
        </member>
        <member name="P:DCS.User.Group.Description">
            <summary>
            Group description.
            </summary>
        </member>
        <member name="P:DCS.User.Group.IsActive">
            <summary>
            Group is active flag.
            </summary>
        </member>
        <member name="P:DCS.User.Group.CreationDate">
            <summary>
            Group creation date.
            </summary>
        </member>
        <member name="P:DCS.User.Group.LastManipulation">
            <summary>
            Group properties last time changed date.
            </summary>
        </member>
        <member name="T:DCS.User.Organisation">
            <summary>
            Represents the user organisation class.
            </summary>
        </member>
        <member name="M:DCS.User.Organisation.#ctor">
            <summary>
            Default constructor for <see cref="T:DCS.User.Organisation"/> instances.
            </summary>
        </member>
        <member name="P:DCS.User.Organisation.Guid">
            <summary>
            Organisation unique identifier.
            </summary>
        </member>
        <member name="P:DCS.User.Organisation.Ident">
            <summary>
            Organisation ident.
            </summary>
        </member>
        <member name="P:DCS.User.Organisation.Name">
            <summary>
            Organisation name.
            </summary>
        </member>
        <member name="P:DCS.User.Organisation.Description">
            <summary>
            Organisation description.
            </summary>
        </member>
        <member name="P:DCS.User.Organisation.IsActive">
            <summary>
            Organisation is active flag.
            </summary>
        </member>
        <member name="P:DCS.User.Organisation.CreationDate">
            <summary>
            Organisation creation date.
            </summary>
        </member>
        <member name="P:DCS.User.Organisation.LastManipulation">
            <summary>
            Organisation properties last time changed date.
            </summary>
        </member>
        <member name="T:DCS.User.Role">
            <summary>
            Represents the user role class.
            </summary>
        </member>
        <member name="M:DCS.User.Role.#ctor">
            <summary>
            Default constructor for <see cref="T:DCS.User.Role"/> instances.
            </summary>
        </member>
        <member name="P:DCS.User.Role.Guid">
            <summary>
            Role unique identifier.
            </summary>
        </member>
        <member name="P:DCS.User.Role.Ident">
            <summary>
            Role ident.
            </summary>
        </member>
        <member name="P:DCS.User.Role.Name">
            <summary>
            Role name.
            </summary>
        </member>
        <member name="P:DCS.User.Role.Description">
            <summary>
            Role description.
            </summary>
        </member>
        <member name="P:DCS.User.Role.IsActive">
            <summary>
            Role is active flag.
            </summary>
        </member>
        <member name="P:DCS.User.Role.CreationDate">
            <summary>
            Role creation date.
            </summary>
        </member>
        <member name="P:DCS.User.Role.LastManipulation">
            <summary>
            Role properties last time changed date.
            </summary>
        </member>
        <member name="T:DCS.User.User">
            <summary>
            Represents the user class.
            </summary>
        </member>
        <member name="M:DCS.User.User.#ctor">
            <summary>
            Default constructor for <see cref="T:DCS.User.User"/> instances.
            </summary>
        </member>
        <member name="P:DCS.User.User.Guid">
            <summary>
            User unique identifier.
            </summary>
        </member>
        <member name="P:DCS.User.User.UserName">
            <summary>
            User name.
            </summary>
        </member>
        <member name="P:DCS.User.User.PassWord">
            <summary>
            User password.
            </summary>
        </member>
        <member name="P:DCS.User.User.Domain">
            <summary>
            User domain name.
            </summary>
        </member>
        <member name="P:DCS.User.User.IsActive">
            <summary>
            User is active flag.
            </summary>
        </member>
        <member name="P:DCS.User.User.KeepLoggedIn">
            <summary>
            User keep logged in flag.
            </summary>
        </member>
        <member name="P:DCS.User.User.IsAdmin">
            <summary>
            User has admin rights flag.
            </summary>
        </member>
        <member name="P:DCS.User.User.IsADUser">
            <summary>
            User is local user flag.
            </summary>
        </member>
        <member name="P:DCS.User.User.CreationDate">
            <summary>
            User creation date.
            </summary>
        </member>
        <member name="P:DCS.User.User.SubstitutionEnd">
            <summary>
            User substituition ending date.
            </summary>
        </member>
        <member name="P:DCS.User.User.LastManipulation">
            <summary>
            User properties last time changed date.
            </summary>
        </member>
        <member name="P:DCS.User.User.ProfilePicturePath">
            <summary>
            Gets or sets the path to the user's profile picture.
            </summary>
        </member>
        <member name="T:DCS.User.UserAssignement">
            <summary>
            Represents the assignment of a user to a group, organisation, and/or role.
            </summary>
        </member>
        <member name="M:DCS.User.UserAssignement.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DCS.User.UserAssignement"/> class.
            </summary>
        </member>
        <member name="P:DCS.User.UserAssignement.Guid">
            <summary>
            Gets or sets the unique identifier for the assignement.
            </summary>
        </member>
        <member name="P:DCS.User.UserAssignement.UserGuid">
            <summary>
            Gets or sets the unique identifier for the user to assign.
            </summary>
        </member>
        <member name="P:DCS.User.UserAssignement.GroupGuid">
            <summary>
            Gets or sets the unique identifier for the group to assign to.
            </summary>
        </member>
        <member name="P:DCS.User.UserAssignement.OrganisationGuid">
            <summary>
            Gets or sets the unique identifier for the organization to assign to.
            </summary>
        </member>
        <member name="P:DCS.User.UserAssignement.RoleGuid">
            <summary>
            Gets or sets the unique identifier for the role to assign to.
            </summary>
        </member>
        <member name="P:DCS.User.UserAssignement.IsActive">
            <summary>
            Gets or sets a value indicating whether the assignement is currently active.
            </summary>
        </member>
        <member name="P:DCS.User.UserAssignement.CreationDate">
            <summary>
            Gets or sets the date and time when the assignement was created.
            </summary>
        </member>
        <member name="P:DCS.User.UserAssignement.LastManipulation">
            <summary>
            Gets or sets the timestamp of the most recent manipulation or update of the assignement.
            </summary>
        </member>
        <member name="P:DCS.User.UserAssignement.MembershipStart">
            <summary>
            Gets or sets the start date of the membership.
            </summary>
        </member>
        <member name="P:DCS.User.UserAssignement.MembershipEnd">
            <summary>
            Gets or sets the date and time when the membership ends.
            </summary>
        </member>
        <member name="T:DCS.User.UserDomain">
            <summary>
            Model for Active Directory user.
            </summary>
        </member>
        <member name="M:DCS.User.UserDomain.#ctor">
            <summary>
            Default constructor for <see cref="T:DCS.User.UserDomain"/> class.
            </summary>
        </member>
        <member name="P:DCS.User.UserDomain.Guid">
            <summary>
            Gets or sets the unique identifier for the domain.
            </summary>
        </member>
        <member name="P:DCS.User.UserDomain.DomainName">
            <summary>
            Gets or sets the name of the domain.
            </summary>
        </member>
        <member name="P:DCS.User.UserDomain.SubscriptionActive">
            <summary>
            Indicates whether the domain has an active subscription.
            </summary>
        </member>
        <member name="P:DCS.User.UserDomain.LicenceKey">
            <summary>
            Gets or sets the license key used to activate the application or service.
            </summary>
        </member>
        <member name="P:DCS.User.UserDomain.StartSubscription">
            <summary>
            Gets or sets the date and time when the subscription for the domain starts.
            </summary>
        </member>
        <member name="P:DCS.User.UserDomain.EndSubscription">
            <summary>
            Gets or sets the estimated date and time when the subscription ends.
            </summary>
        </member>
    </members>
</doc>
