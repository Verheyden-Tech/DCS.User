<?xml version="1.0"?>
<doc>
    <assembly>
        <name>DCS.User.Service</name>
    </assembly>
    <members>
        <member name="T:DCS.User.Service.CurrentDomainService">
            <summary>
            Provides a thread-safe service for managing the current user domain within the application.
            </summary>
            <remarks>The <see cref="T:DCS.User.Service.CurrentDomainService"/> class is implemented as a singleton, ensuring that
            only one instance of the service exists throughout the application's lifetime. It allows setting, retrieving,
            and resetting the current user domain in a thread-safe manner. Once the domain is set, it becomes immutable
            until explicitly reset using the <see cref="M:DCS.User.Service.CurrentDomainService.UnsetDomain"/> method.</remarks>
        </member>
        <member name="P:DCS.User.Service.CurrentDomainService.Instance">
            <summary>
            Gets the singleton instance of the <see cref="T:DCS.User.Service.CurrentDomainService"/> class.
            </summary>
        </member>
        <member name="F:DCS.User.Service.CurrentDomainService.currentDomain">
            <summary>
            Represents the current domain associated with the user.
            </summary>
            <remarks>This field holds the user's domain information and is used internally to manage
            user-specific operations.</remarks>
        </member>
        <member name="P:DCS.User.Service.CurrentDomainService.CurrentDomain">
            <summary>
            Gets the current user domain associated with the application.
            </summary>
            <remarks>The property is thread-safe and ensures that the domain is set only once.  Attempts
            to modify the value after it has been set will be ignored, and an error will be logged.</remarks>
        </member>
        <member name="M:DCS.User.Service.CurrentDomainService.SetDomain(DCS.User.UserDomain)">
            <summary>
            Sets the current domain for the user.
            </summary>
            <remarks>This method updates the <c>CurrentDomain</c> property to the specified domain. Ensure
            that the provided domain is valid and not <see langword="null"/>.</remarks>
            <param name="domain">The <see cref="T:DCS.User.UserDomain"/> to set as the current domain. Cannot be <see langword="null"/>.</param>
        </member>
        <member name="M:DCS.User.Service.CurrentDomainService.UnsetDomain">
            <summary>
            Resets the current domain to its default state.
            </summary>
            <remarks>This method clears the current domain by setting it to <see langword="null"/> and
            unlocks the domain by setting the lock state to <see langword="false"/>. It is thread-safe and ensures that
            the operation is performed atomically.</remarks>
        </member>
        <member name="T:DCS.User.Service.CurrentUserService">
            <summary>
            Provides a thread-safe service for managing the current user of the application.
            </summary>
            <remarks>This class implements a singleton pattern to ensure a single instance is used throughout the
            application. It allows setting, retrieving, and clearing the current user in a thread-safe manner. Once the
            current user is set, it cannot be modified unless explicitly cleared using the <see cref="M:DCS.User.Service.CurrentUserService.UnsetUser"/>
            method.</remarks>
        </member>
        <member name="P:DCS.User.Service.CurrentUserService.Instance">
            <summary>
            Gets the singleton instance of the <see cref="T:DCS.User.Service.CurrentUserService"/> class.
            </summary>
        </member>
        <member name="F:DCS.User.Service.CurrentUserService.currentUser">
            <summary>
            Represents the currently logged-in user.
            </summary>
            <remarks>This field holds the user information for the active session. It is intended for
            internal use  and should not be accessed directly outside of the class. Use appropriate methods or
            properties  to interact with the current user.</remarks>
        </member>
        <member name="P:DCS.User.Service.CurrentUserService.CurrentUser">
            <summary>
            Gets the current user of the application.
            </summary>
            <remarks>The property is thread-safe and ensures that the user is set only once. Any attempt
            to modify the user after it has been set will be logged as an error.</remarks>
        </member>
        <member name="M:DCS.User.Service.CurrentUserService.SetUser(DCS.User.User)">
            <summary>
            Sets the current user of the application.
            </summary>
            <param name="user">The user to set as the current user. Cannot be <see langword="null"/>.</param>
        </member>
        <member name="M:DCS.User.Service.CurrentUserService.UnsetUser">
            <summary>
            Clears the current user and unlocks the user state.
            </summary>
            <remarks>This method sets the current user to <see langword="null"/> and resets the lock state
            to allow further modifications. It is thread-safe and ensures that the operation is performed
            atomically.</remarks>
        </member>
        <member name="T:DCS.User.Service.GroupService">
            <summary>
            Represents the GroupService for <see cref="T:DCS.User.Group"/> entities.
            </summary>
        </member>
        <member name="M:DCS.User.Service.GroupService.#ctor(DCS.User.IGroupRepository)">
            <summary>
            Default constructor initialize a new instance of the <see cref="T:DCS.User.Service.GroupService"/> class.
            </summary>
            <param name="repository">Instance of <see cref="T:DCS.User.IGroupRepository"/>.</param>
        </member>
        <member name="M:DCS.User.Service.GroupService.CreateGroup(System.String,System.String,System.Boolean,System.Guid)">
            <inheritdoc/>
        </member>
        <member name="M:DCS.User.Service.GroupService.GetByName(System.String)">
            <inheritdoc/>
        </member>
        <member name="T:DCS.User.Service.OrganisationService">
            <summary>
            Represents the OrganisationService for <see cref="T:DCS.User.Organisation"/> entities.
            </summary>
        </member>
        <member name="M:DCS.User.Service.OrganisationService.#ctor(DCS.User.IOrganisationRepository)">
            <summary>
            Default constructor for OrganisationService.
            </summary>
            <param name="repository">Instance of <see cref="T:DCS.User.IOrganisationRepository"/>.</param>
        </member>
        <member name="M:DCS.User.Service.OrganisationService.CreateOrganisation(System.String,System.String,System.Boolean,System.Guid)">
            <inheritdoc/>
        </member>
        <member name="M:DCS.User.Service.OrganisationService.GetByName(System.String)">
            <inheritdoc/>
        </member>
        <member name="T:DCS.User.Service.RoleService">
            <summary>
            Represents the RoleService for <see cref="T:DCS.User.Role"/> entities.
            </summary>
        </member>
        <member name="M:DCS.User.Service.RoleService.#ctor(DCS.User.IRoleRepository)">
            <summary>
            Default constructor for RoleService.
            </summary>
            <param name="repository">Instance of <see cref="T:DCS.User.IRoleRepository"/>.</param>
        </member>
        <member name="M:DCS.User.Service.RoleService.GetByName(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:DCS.User.Service.RoleService.CreateRole(System.String,System.String,System.Boolean,System.Guid)">
            <inheritdoc/>
        </member>
        <member name="T:DCS.User.Service.UserDomainService">
            <summary>
            Provides domain-specific operations for managing user data, including access and manipulation of user domain
            entities.
            </summary>
            <remarks>This service acts as a bridge between the application layer and the data access layer,
            encapsulating business logic  related to user domains. It relies on an <see cref="T:DCS.User.IUserDomainRepository"/>
            implementation to perform data operations.</remarks>
        </member>
        <member name="M:DCS.User.Service.UserDomainService.#ctor(DCS.User.IUserDomainRepository)">
            <summary>
            Initializes a new instance of the <see cref="T:DCS.User.Service.UserDomainService"/> class with the specified repository.
            </summary>
            <param name="repository">The repository used to access and manage user domain data. This parameter cannot be <see langword="null"/>.</param>
        </member>
        <member name="T:DCS.User.Service.UserService">
            <summary>
            UserService with basic methods inherited from <see cref="T:DCS.CoreLib.BaseClass.ServiceBase`3"/> to handle user account data.
            </summary>
        </member>
        <member name="M:DCS.User.Service.UserService.#ctor(DCS.User.IUserRepository)">
            <summary>
            Default constructor for UserService.
            </summary>
        </member>
        <member name="M:DCS.User.Service.UserService.GetByName(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:DCS.User.Service.UserService.CheckForKeepLoggedIn">
            <inheritdoc/>
        </member>
        <member name="M:DCS.User.Service.UserService.SetKeepLoggedIn(DCS.User.User)">
            <inheritdoc/>
        </member>
        <member name="M:DCS.User.Service.UserService.UnsetKeepLoggedIn(DCS.User.User)">
            <inheritdoc/>
        </member>
        <member name="M:DCS.User.Service.UserService.GetSha256Hash(System.String)">
            <inheritdoc/>
        </member>
        <member name="T:DCS.User.UserAssignementService">
            <summary>
            Represents the service for managing user assignments.
            </summary>
        </member>
        <member name="M:DCS.User.UserAssignementService.#ctor(DCS.User.IUserAssignementRepository)">
            <summary>
            Initializes a new instance of the <see cref="T:DCS.User.UserAssignementService"/> class.
            </summary>
            <param name="repository">The repository used to manage user assignments. This parameter cannot be null.</param>
        </member>
        <member name="M:DCS.User.UserAssignementService.AddUserToGroup(System.Guid,System.Guid)">
            <inheritdoc/>
        </member>
        <member name="M:DCS.User.UserAssignementService.RemoveUserFromGroup(DCS.User.UserAssignement)">
            <inheritdoc/>
        </member>
        <member name="M:DCS.User.UserAssignementService.AddUserToOrganisation(System.Guid,System.Guid)">
            <inheritdoc/>
        </member>
        <member name="M:DCS.User.UserAssignementService.RemoveUserFromOrganisation(DCS.User.UserAssignement)">
            <inheritdoc/>
        </member>
        <member name="M:DCS.User.UserAssignementService.AddUserToRole(System.Guid,System.Guid)">
            <inheritdoc/>
        </member>
        <member name="M:DCS.User.UserAssignementService.RemoveUserFromRole(DCS.User.UserAssignement)">
            <inheritdoc/>
        </member>
        <member name="M:DCS.User.UserAssignementService.GetByUserAndGroup(System.Guid,System.Guid)">
            <inheritdoc/>
        </member>
        <member name="M:DCS.User.UserAssignementService.GetByUserAndOrganisation(System.Guid,System.Guid)">
            <inheritdoc/>
        </member>
        <member name="M:DCS.User.UserAssignementService.GetByUserAndRole(System.Guid,System.Guid)">
            <inheritdoc/>
        </member>
    </members>
</doc>
