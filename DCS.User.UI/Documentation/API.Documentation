<?xml version="1.0"?>
<doc>
    <assembly>
        <name>DCS.User.UI</name>
    </assembly>
    <members>
        <member name="T:DCS.User.UI.GroupViewModel">
            <summary>
            Represents the ViewModel for the <see cref="T:DCS.User.Group"/> model. Implements the <see cref="T:DCS.CoreLib.BaseClass.ViewModelBase`2"/> class.
            </summary>
        </member>
        <member name="M:DCS.User.UI.GroupViewModel.#ctor(DCS.User.Group)">
            <summary>
            Default constructor initialize a new instance of <see cref="T:DCS.User.UI.GroupViewModel"/>.
            </summary>
            <param name="group">Instance of <see cref="T:DCS.User.Group"/>.</param>
        </member>
        <member name="M:DCS.User.UI.GroupViewModel.Save">
            <summary>
            Saves the current instance of the <see cref="T:DCS.User.UI.GroupViewModel"/> class.
            </summary>
            <returns>True if the save was successful; otherwise, false.</returns>
        </member>
        <member name="M:DCS.User.UI.GroupViewModel.GetAllActiveGroups">
            <summary>
            Gets all available active groups from the table.
            </summary>
            <returns>All avialable active groups from the table.</returns>
        </member>
        <member name="M:DCS.User.UI.GroupViewModel.GetAllGroupMember(DCS.User.Group)">
            <summary>
            Retrieves all members of the specified group.
            </summary>
            <remarks>This method queries the user assignments to determine which users belong to the
            specified group. If a user assignment references a user that cannot be retrieved, that user is
            skipped.</remarks>
            <param name="group">The group for which to retrieve the members. Cannot be <see langword="null"/>.</param>
            <returns>An <see cref="T:System.Collections.ObjectModel.ObservableCollection`1"/> of <see cref="T:DCS.User.User"/> objects representing the members of the
            specified group.  Returns an empty collection if the group has no members or if the group is <see
            langword="null"/>.</returns>
        </member>
        <member name="M:DCS.User.UI.GroupViewModel.AddUserToGroup(DCS.User.User)">
            <summary>
            Adds the specified user to the specified group.
            </summary>
            <remarks>This method attempts to add the user to the group using the underlying user
            assignment service. Ensure that both the user and group objects are valid and initialized before calling
            this method.</remarks>
            <param name="user">The user to be added to the group. Cannot be <see langword="null"/>.</param>
            <returns><see langword="true"/> if the user was successfully added to the group; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:DCS.User.UI.GroupViewModel.RemoveUserFromGroup(DCS.User.User)">
            <summary>
            Removes the specified user from the specified group.
            </summary>
            <remarks>This method checks if the user is currently assigned to the group before attempting
            to remove them. If either the user or the group is <see langword="null"/>, the method returns <see
            langword="false"/>.</remarks>
            <param name="user">The user to be removed from the group. Cannot be <see langword="null"/>.</param>
            <returns><see langword="true"/> if the user was successfully removed from the group; otherwise, <see
            langword="false"/>.</returns>
        </member>
        <member name="P:DCS.User.UI.GroupViewModel.Guid">
            <summary>
            Group unique identifier.
            </summary>
        </member>
        <member name="P:DCS.User.UI.GroupViewModel.Ident">
            <summary>
            Group ident.
            </summary>
        </member>
        <member name="P:DCS.User.UI.GroupViewModel.Name">
            <summary>
            Group name.
            </summary>
        </member>
        <member name="P:DCS.User.UI.GroupViewModel.Description">
            <summary>
            Group description.
            </summary>
        </member>
        <member name="P:DCS.User.UI.GroupViewModel.IsActive">
            <summary>
            Group is active flag.
            </summary>
        </member>
        <member name="P:DCS.User.UI.GroupViewModel.UserGuid">
            <summary>
            Group creator user unique identifier.
            </summary>
        </member>
        <member name="P:DCS.User.UI.GroupViewModel.CreationDate">
            <summary>
            Group creation date.
            </summary>
        </member>
        <member name="P:DCS.User.UI.GroupViewModel.LastManipulation">
            <summary>
            Group properties last time changed date.
            </summary>
        </member>
        <member name="T:DCS.User.UI.OrganisationViewModel">
            <summary>
            Represents the view model for the <see cref="T:DCS.User.Organisation"/> model. Implements the <see cref="T:DCS.CoreLib.BaseClass.ViewModelBase`2"/> class.
            </summary>
        </member>
        <member name="M:DCS.User.UI.OrganisationViewModel.#ctor(DCS.User.Organisation)">
            <summary>
            Default constructor initialize a new instance of <see cref="T:DCS.User.UI.OrganisationViewModel"/>.
            </summary>
        </member>
        <member name="M:DCS.User.UI.OrganisationViewModel.Save">
            <summary>
            Saves the current instance of the <see cref="T:DCS.User.UI.OrganisationViewModel"/> class.
            </summary>
            <returns>True if the save was successful; otherwise, false.</returns>
        </member>
        <member name="M:DCS.User.UI.OrganisationViewModel.GetAllActiveOrganisations">
            <summary>
            Gets all available active organisations from the table.
            </summary>
            <returns>All avialable active organisations from the table.</returns>
        </member>
        <member name="M:DCS.User.UI.OrganisationViewModel.GetAllOrganisationMember(DCS.User.Organisation)">
            <summary>
            Retrieves all members of the specified organisation.
            </summary>
            <remarks>This method queries the user assignments associated with the specified organisation
            and retrieves the corresponding user details.</remarks>
            <param name="organisation">The organisation for which to retrieve the members. Cannot be <see langword="null"/>.</param>
            <returns>An <see cref="T:System.Collections.ObjectModel.ObservableCollection`1"/> of <see cref="T:DCS.User.User"/> objects representing the members of the
            specified organisation.  Returns an empty collection if the organisation has no members or if the
            organisation is <see langword="null"/>.</returns>
        </member>
        <member name="M:DCS.User.UI.OrganisationViewModel.AddUserToOrganisation(DCS.User.User)">
            <summary>
            Adds the specified user to the current organization.
            </summary>
            <remarks>This method attempts to associate the specified user with the organization
            represented by the current model. Ensure that both the user and the organization are valid before calling
            this method.</remarks>
            <param name="user">The user to be added to the organization. The user must not be <see langword="null"/>.</param>
            <returns><see langword="true"/> if the user was successfully added to the organization; otherwise, <see
            langword="false"/>.</returns>
        </member>
        <member name="M:DCS.User.UI.OrganisationViewModel.RemoveUserFromOrganisation(DCS.User.User)">
            <summary>
            Removes the specified user from the current organization.
            </summary>
            <remarks>This method attempts to remove the specified user from the organization associated
            with the current model. If the user is not assigned to the organization or if the operation fails, the
            method returns <see langword="false"/>.</remarks>
            <param name="user">The user to be removed from the organization. Cannot be <see langword="null"/>.</param>
            <returns><see langword="true"/> if the user was successfully removed from the organization; otherwise, <see
            langword="false"/>.</returns>
        </member>
        <member name="P:DCS.User.UI.OrganisationViewModel.Guid">
            <summary>
            Organisation unique identifier.
            </summary>
        </member>
        <member name="P:DCS.User.UI.OrganisationViewModel.Ident">
            <summary>
            Organisation ident.
            </summary>
        </member>
        <member name="P:DCS.User.UI.OrganisationViewModel.Name">
            <summary>
            Organisation name.
            </summary>
        </member>
        <member name="P:DCS.User.UI.OrganisationViewModel.Description">
            <summary>
            Organisation description.
            </summary>
        </member>
        <member name="P:DCS.User.UI.OrganisationViewModel.IsActive">
            <summary>
            Organisation is active flag.
            </summary>
        </member>
        <member name="P:DCS.User.UI.OrganisationViewModel.UserGuid">
            <summary>
            Organisation creator user unique identifier.
            </summary>
        </member>
        <member name="P:DCS.User.UI.OrganisationViewModel.CreationDate">
            <summary>
            Organisation creation date.
            </summary>
        </member>
        <member name="P:DCS.User.UI.OrganisationViewModel.LastManipulation">
            <summary>
            Organisation properties last time changed date.
            </summary>
        </member>
        <member name="T:DCS.User.UI.RegistrateUserViewModel">
            <summary>
            ViewModel for the <see cref="M:DCS.User.UI.RegistrateUserViewModel.RegistrateUser"/> view.
            </summary>
        </member>
        <member name="M:DCS.User.UI.RegistrateUserViewModel.#ctor(DCS.User.User)">
            <summary>
            Initializes a new instance of the <see cref="T:DCS.User.UI.RegistrateUserViewModel"/> class with the specified user.
            </summary>
            <param name="user">The user model to associate with this view model. Cannot be <see langword="null"/>.</param>
        </member>
        <member name="M:DCS.User.UI.RegistrateUserViewModel.RegistrateUser">
            <summary>
            Registers a user in the system, either as an Active Directory (AD) user or a standard user.
            </summary>
            <remarks>This method determines the type of user based on the <see cref="P:DCS.User.UI.RegistrateUserViewModel.IsADUser"/> property.
            If the user is an AD user, it creates and registers the user using Active Directory-specific logic. 
            Otherwise, it creates a standard user and registers them in the system.</remarks>
            <returns><see langword="true"/> if the user was successfully registered; otherwise, <see langword="false"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if the user creation process for a standard user results in a null user object.</exception>
        </member>
        <member name="P:DCS.User.UI.RegistrateUserViewModel.UserName">
            <summary>
            Gets or sets the name of the user.
            </summary>
        </member>
        <member name="P:DCS.User.UI.RegistrateUserViewModel.PassWord">
            <summary>
            Gets or sets the password of the user.
            </summary>
        </member>
        <member name="P:DCS.User.UI.RegistrateUserViewModel.Domain">
            <summary>
            Gets or sets the domain name of the user.
            </summary>
        </member>
        <member name="P:DCS.User.UI.RegistrateUserViewModel.IsAdmin">
            <summary>
            Gets or sets the flag if the user has admin rights.
            </summary>
        </member>
        <member name="P:DCS.User.UI.RegistrateUserViewModel.IsADUser">
            <summary>
            Gets or sets the flag if the user is a local user.
            </summary>
        </member>
        <member name="P:DCS.User.UI.RegistrateUserViewModel.KeepLoggedIn">
            <summary>
            Gets or sets the flag if the user shall be keep logged in.
            </summary>
        </member>
        <member name="T:DCS.User.UI.RoleViewModel">
            <summary>
            Represents the ViewModel for the <see cref="T:DCS.User.Role"/> model. Implements the <see cref="T:DCS.CoreLib.BaseClass.ViewModelBase`2"/> class.
            </summary>
        </member>
        <member name="M:DCS.User.UI.RoleViewModel.#ctor(DCS.User.Role)">
            <summary>
            Default constructor to initialize a new instance of <see cref="T:DCS.User.UI.RoleViewModel"/>.
            </summary>
            <param name="role">Instance of <see cref="T:DCS.User.Role"/>.</param>
        </member>
        <member name="M:DCS.User.UI.RoleViewModel.Save">
            <summary>
            Saves the current instance of the <see cref="T:DCS.User.UI.RoleViewModel"/> class.
            </summary>
            <returns>True if the save was succesful; otherwise, false.</returns>
        </member>
        <member name="M:DCS.User.UI.RoleViewModel.GetAllActiveRoles">
            <summary>
            Gets all available active roles from the table.
            </summary>
            <returns>All avialable active roles from the table.</returns>
        </member>
        <member name="M:DCS.User.UI.RoleViewModel.GetAllRoleMember(DCS.User.Role)">
            <summary>
            Retrieves all users assigned to the specified role.
            </summary>
            <remarks>This method queries the user assignments to find all users associated with the
            specified role.  If the role is <see langword="null"/>, an empty collection is returned.</remarks>
            <param name="role">The role for which to retrieve the assigned users. Cannot be <see langword="null"/>.</param>
            <returns>An <see cref="T:System.Collections.ObjectModel.ObservableCollection`1"/> of <see cref="T:DCS.User.User"/> objects representing the users assigned to
            the specified role.  Returns an empty collection if no users are assigned to the role or if the role is <see
            langword="null"/>.</returns>
        </member>
        <member name="M:DCS.User.UI.RoleViewModel.AddUserToRole(DCS.User.User)">
            <summary>
            Adds the specified user to the role associated with the current model.
            </summary>
            <remarks>This method attempts to assign the specified user to the role represented by the
            current model.  Ensure that both the user and the model are valid before calling this method.</remarks>
            <param name="user">The user to be added to the role. Cannot be <see langword="null"/>.</param>
            <returns><see langword="true"/> if the user was successfully added to the role; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:DCS.User.UI.RoleViewModel.RemoveUserFromRole(DCS.User.User)">
            <summary>
            Removes the specified user from the current role.
            </summary>
            <remarks>This method checks if the user is assigned to the current role and removes the
            assignment if it exists. If the user is not assigned to the role, the method returns <see
            langword="false"/>.</remarks>
            <param name="user">The user to be removed from the role. Cannot be <see langword="null"/>.</param>
            <returns><see langword="true"/> if the user was successfully removed from the role; otherwise, <see
            langword="false"/>.</returns>
        </member>
        <member name="P:DCS.User.UI.RoleViewModel.Guid">
            <summary>
            Role unique identifier.
            </summary>
        </member>
        <member name="P:DCS.User.UI.RoleViewModel.Ident">
            <summary>
            Role ident.
            </summary>
        </member>
        <member name="P:DCS.User.UI.RoleViewModel.Name">
            <summary>
            Role name.
            </summary>
        </member>
        <member name="P:DCS.User.UI.RoleViewModel.Description">
            <summary>
            Role description.
            </summary>
        </member>
        <member name="P:DCS.User.UI.RoleViewModel.IsActive">
            <summary>
            Role is active flag.
            </summary>
        </member>
        <member name="P:DCS.User.UI.RoleViewModel.UserGuid">
            <summary>
            Role creator user unique identifier.
            </summary>
        </member>
        <member name="P:DCS.User.UI.RoleViewModel.CreationDate">
            <summary>
            Role creation date.
            </summary>
        </member>
        <member name="P:DCS.User.UI.RoleViewModel.LastManipulation">
            <summary>
            Role properties last time changed date.
            </summary>
        </member>
        <member name="T:DCS.User.UI.UserLoginViewModel">
            <summary>
            Represents the view model for user login functionality, providing properties and methods to manage user
            authentication and related data.
            </summary>
            <remarks>This view model is designed to facilitate user login operations, including Active Directory
            authentication and retrieval of user-related data. It provides properties for managing user credentials,
            selected database, and user account names, as well as methods for logging in and retrieving user names based on
            connection type.</remarks>
        </member>
        <member name="M:DCS.User.UI.UserLoginViewModel.#ctor(DCS.User.User)">
            <summary>
            Initializes a new instance of the <see cref="T:DCS.User.UI.UserLoginViewModel"/> class with the specified user.
            </summary>
            <param name="user">The user associated with this view model. Cannot be <see langword="null"/>.</param>
        </member>
        <member name="M:DCS.User.UI.UserLoginViewModel.LoginUser(System.String,System.String,System.String)">
            <summary>
            Attempts to log in a user using the provided credentials and Active Directory domain.
            </summary>
            <param name="username">The username of the user attempting to log in. Cannot be null or empty.</param>
            <param name="password">The password associated with the specified username. Cannot be null or empty.</param>
            <param name="adDomain">The Active Directory domain to authenticate against. Cannot be null or empty.</param>
            <returns><see langword="true"/> if the login is successful; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:DCS.User.UI.UserLoginViewModel.SetItemsSource(System.String)">
            <summary>
            Retrieves a collection of user names based on the specified connection type.
            </summary>
            <remarks>This method initializes a new <see cref="T:System.Collections.ObjectModel.ObservableCollection`1"/> and populates it
            with user names  retrieved from the user service when the connection type is "Home."</remarks>
            <param name="connectionType">The type of connection to use when retrieving user names.  Must be "Home" to populate the collection;
            otherwise, an empty collection is returned.</param>
            <returns>An <see cref="T:System.Collections.ObjectModel.ObservableCollection`1"/> containing the user names.  The collection will be empty if the
            connection type is not "Home."</returns>
        </member>
        <member name="P:DCS.User.UI.UserLoginViewModel.SelectedDB">
            <summary>
            Gets or sets the selected database as string.
            </summary>
        </member>
        <member name="P:DCS.User.UI.UserLoginViewModel.UserName">
            <summary>
            Gets or sets the user name.
            </summary>
        </member>
        <member name="P:DCS.User.UI.UserLoginViewModel.KeepLoggedIn">
            <summary>
            Indicates if a user shall be keep logged in.
            </summary>
        </member>
        <member name="P:DCS.User.UI.UserLoginViewModel.UserNames">
            <summary>
            Contains avialable user account names.
            </summary>
        </member>
        <member name="T:DCS.User.UI.UserManagementViewModel">
            <summary>
            ViewModel for the <see cref="T:DCS.User.UI.UserManagement"/> view.
            </summary>
        </member>
        <member name="M:DCS.User.UI.UserManagementViewModel.#ctor(DCS.User.User)">
            <summary>
            Default constructor initialize a new instance of <see cref="T:DCS.User.UI.UserManagementViewModel"/>.
            </summary>
        </member>
        <member name="M:DCS.User.UI.UserManagementViewModel.GetByName(System.String)">
            <summary>
            Gets a user by its user name.
            </summary>
            <param name="userName">Given user name.</param>
            <returns>User instance by its username.</returns>
        </member>
        <member name="P:DCS.User.UI.UserManagementViewModel.Guid">
            <summary>
            Gets or sets the unique identifier for the user.
            </summary>
        </member>
        <member name="P:DCS.User.UI.UserManagementViewModel.UserName">
            <summary>
            Gets or sets the user name.
            </summary>
        </member>
        <member name="P:DCS.User.UI.UserManagementViewModel.PassWord">
            <summary>
            Gets or sets the user password.
            </summary>
        </member>
        <member name="P:DCS.User.UI.UserManagementViewModel.IsAdmin">
            <summary>
            Gets or sets the user is admin flag.
            </summary>
        </member>
        <member name="T:DCS.User.UI.UserViewModel">
            <summary>
            Implements the <see cref="T:DCS.CoreLib.BaseClass.ViewModelBase`2"/> class for the <see cref="T:DCS.User.User"/> model.
            </summary>
        </member>
        <member name="F:DCS.User.UI.UserViewModel.groups">
            <summary>
            Contains all avialable user groups from the table.
            </summary>
        </member>
        <member name="F:DCS.User.UI.UserViewModel.organisations">
            <summary>
            Contains all avialable user organisations from the table.
            </summary>
        </member>
        <member name="F:DCS.User.UI.UserViewModel.roles">
            <summary>
            Contains all avialable user roles from the table.
            </summary>
        </member>
        <member name="F:DCS.User.UI.UserViewModel.userGroups">
            <summary>
            Contains all added user groups.
            </summary>
        </member>
        <member name="F:DCS.User.UI.UserViewModel.userOrganisations">
            <summary>
            Contains all added user organisations.
            </summary>
        </member>
        <member name="F:DCS.User.UI.UserViewModel.userRoles">
            <summary>
            Contains all added user roles.
            </summary>
        </member>
        <member name="M:DCS.User.UI.UserViewModel.#ctor(DCS.User.User)">
            <summary>
            Initializes a new instance of the <see cref="T:DCS.User.UI.UserViewModel"/> class using the specified user.
            </summary>
            <remarks>This constructor populates the view model with data related to the specified user,
            including their groups, organizations, and roles. It also retrieves all available groups, organizations, and
            roles for reference.</remarks>
            <param name="user">The user model used to initialize the view model. Cannot be <see langword="null"/>.</param>
        </member>
        <member name="M:DCS.User.UI.UserViewModel.Save">
            <summary>
            Saves the current model by updating its state and persisting changes.
            </summary>
            <remarks>This method updates the <see cref="T:DCS.User.User"/> with the current timestamp and attempts
            to persist the changes  using the associated user service. The operation will fail if <see cref="T:DCS.User.User"/> is
            null or if the update  operation is unsuccessful.</remarks>
            <returns><see langword="true"/> if the model was successfully updated and saved; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:DCS.User.UI.UserViewModel.AddUserToGroup(DCS.User.Group)">
            <summary>
            Adds the current user to the specified group.
            </summary>
            <remarks>This method checks if the user is already a member of the specified group before
            attempting to add them. If the user is already a member or if the operation fails, the method returns <see
            langword="false"/>.</remarks>
            <param name="group">The group to which the user will be added. Cannot be <see langword="null"/>.</param>
            <returns><see langword="true"/> if the user was successfully added to the group; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:DCS.User.UI.UserViewModel.RemoveUserFromGroup(DCS.User.Group)">
            <summary>
            Removes the current user from the specified group.
            </summary>
            <remarks>This method checks if the user is a member of the specified group and attempts to
            remove the user from it. The operation will fail if the group is not found, the user is not a member of the
            group, or if the removal process encounters an issue.</remarks>
            <param name="group">The group from which the user should be removed. Cannot be <see langword="null"/>.</param>
            <returns><see langword="true"/> if the user was successfully removed from the group; otherwise, <see
            langword="false"/>.</returns>
        </member>
        <member name="M:DCS.User.UI.UserViewModel.GetUserGroups(DCS.User.User)">
            <summary>
            Retrieves the collection of groups associated with the specified user.
            </summary>
            <remarks>This method filters the user's group assignments based on valid group identifiers and
            retrieves the corresponding group objects from the available groups. If a group associated with the user
            cannot be found, it is skipped.</remarks>
            <param name="user">The user whose groups are to be retrieved. Cannot be <see langword="null"/>.</param>
            <returns>An <see cref="T:System.Collections.ObjectModel.ObservableCollection`1"/> of <see cref="T:DCS.User.Group"/> objects representing the groups the
            specified user is assigned to. Returns an empty collection if the user is not assigned to any groups or if
            <paramref name="user"/> is <see langword="null"/>.</returns>
        </member>
        <member name="M:DCS.User.UI.UserViewModel.AddUserToOrganisation(DCS.User.Organisation)">
            <summary>
            Adds the current user to the specified organisation.
            </summary>
            <remarks>This method ensures that the user is not already a member of the specified
            organisation before attempting to add them. The operation will fail if the organisation is <see
            langword="null"/> or if the user is already associated with the organisation.</remarks>
            <param name="organisation">The organisation to which the user will be added. Cannot be <see langword="null"/>.</param>
            <returns><see langword="true"/> if the user was successfully added to the organisation; otherwise, <see
            langword="false"/>.</returns>
        </member>
        <member name="M:DCS.User.UI.UserViewModel.RemoveUserFromOrganisation(DCS.User.Organisation)">
            <summary>
            Removes the current user from the specified organisation.
            </summary>
            <remarks>This method checks if the user is associated with the specified organisation and, if
            so,  attempts to remove the user. The operation will fail if the user is not associated with the 
            organisation or if the removal process encounters an issue.</remarks>
            <param name="organisation">The organisation from which the user should be removed. Cannot be <see langword="null"/>.</param>
            <returns><see langword="true"/> if the user was successfully removed from the organisation;  otherwise, <see
            langword="false"/>.</returns>
        </member>
        <member name="M:DCS.User.UI.UserViewModel.GetUserOrganisations(DCS.User.User)">
            <summary>
            Retrieves a collection of organisations associated with the specified user.
            </summary>
            <remarks>This method filters organisations based on the user's assignments, ensuring that only
            valid organisations  with non-empty GUIDs are included in the result.</remarks>
            <param name="user">The user whose associated organisations are to be retrieved. Cannot be <see langword="null"/>.</param>
            <returns>An <see cref="T:System.Collections.ObjectModel.ObservableCollection`1"/> of <see cref="T:DCS.User.Organisation"/> objects representing the
            organisations  linked to the specified user. Returns an empty collection if the user has no associated
            organisations or if  <paramref name="user"/> is <see langword="null"/>.</returns>
        </member>
        <member name="M:DCS.User.UI.UserViewModel.AddUserToRole(DCS.User.Role)">
            <summary>
            Adds the specified role to the user if it is not already assigned.
            </summary>
            <remarks>This method checks if the role is not already assigned to the user before attempting
            to add it.  If the role is successfully added, it is also added to the local collection of user
            roles.</remarks>
            <param name="role">The role to assign to the user. Cannot be <see langword="null"/>.</param>
            <returns><see langword="true"/> if the role was successfully added to the user;  otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:DCS.User.UI.UserViewModel.RemoveUserFromRole(DCS.User.Role)">
            <summary>
            Removes the specified role from the current user.
            </summary>
            <remarks>This method attempts to remove the specified role from the current user. The
            operation will fail if: <list type="bullet"> <item><description>The <paramref name="role"/> is not assigned
            to the user.</description></item> <item><description>The role or user data cannot be retrieved or updated
            due to an internal issue.</description></item> </list> Ensure that the <paramref name="role"/> parameter is
            not <see langword="null"/> before calling this method.</remarks>
            <param name="role">The role to be removed from the user. Cannot be <see langword="null"/>.</param>
            <returns><see langword="true"/> if the role was successfully removed from the user; otherwise, <see
            langword="false"/>.</returns>
        </member>
        <member name="M:DCS.User.UI.UserViewModel.GetUserRoles(DCS.User.User)">
            <summary>
            Retrieves the roles assigned to the specified user.
            </summary>
            <remarks>This method filters roles based on the user's assignments and excludes any roles with
            an empty GUID. The returned collection is dynamically observable, meaning changes to the collection will
            notify any bound UI or listeners.</remarks>
            <param name="user">The user for whom to retrieve roles. Cannot be <see langword="null"/>.</param>
            <returns>An <see cref="T:System.Collections.ObjectModel.ObservableCollection`1"/> of <see cref="T:DCS.User.Role"/> objects representing the roles assigned to
            the user. If the user has no roles or if <paramref name="user"/> is <see langword="null"/>, an empty
            collection is returned.</returns>
        </member>
        <member name="M:DCS.User.UI.UserViewModel.SetUserProfilePicture">
            <summary>
            Opens a file dialog to allow the user to select an image file and sets the selected file  as the user's
            profile picture.
            </summary>
            <remarks>The file dialog filters for common image file formats, including .jpg, .jpeg, .png,
            .gif, and .bmp. If a file is selected, the profile picture path is updated and a property change
            notification is raised.</remarks>
            <returns><see langword="true"/> if the user successfully selects an image file; otherwise,  <see langword="false"/>.</returns>
        </member>
        <member name="P:DCS.User.UI.UserViewModel.AllGroups">
            <summary>
            Contains all avialable user groups from the table.
            </summary>
        </member>
        <member name="P:DCS.User.UI.UserViewModel.UserGroups">
            <summary>
            Contains all added user groups.
            </summary>
        </member>
        <member name="P:DCS.User.UI.UserViewModel.AllOrganisations">
            <summary>
            Contains all avialable user organisations from the table.
            </summary>
        </member>
        <member name="P:DCS.User.UI.UserViewModel.UserOrganisations">
            <summary>
            Contains all added user organisations.
            </summary>
        </member>
        <member name="P:DCS.User.UI.UserViewModel.AllRoles">
            <summary>
            Contains all avialable user roles from the table.
            </summary>
        </member>
        <member name="P:DCS.User.UI.UserViewModel.UserRoles">
            <summary>
            Contains all added user roles.
            </summary>
        </member>
        <member name="P:DCS.User.UI.UserViewModel.Guid">
            <summary>
            Gets or sets the unique identifier for the user.
            </summary>
        </member>
        <member name="P:DCS.User.UI.UserViewModel.Ident">
            <summary>
            Gets or sets the user identifier.
            </summary>
        </member>
        <member name="P:DCS.User.UI.UserViewModel.UserName">
            <summary>
            Gets or sets the user name.
            </summary>
        </member>
        <member name="P:DCS.User.UI.UserViewModel.PassWord">
            <summary>
            Gets or sets the user password.
            </summary>
        </member>
        <member name="P:DCS.User.UI.UserViewModel.Domain">
            <summary>
            Gets or sets the user domain name.
            </summary>
        </member>
        <member name="P:DCS.User.UI.UserViewModel.IsActive">
            <summary>
            Gets or sets the user is admin flag.
            </summary>
        </member>
        <member name="P:DCS.User.UI.UserViewModel.KeepLoggedIn">
            <summary>
            Gets or sets the user keep logged in flag.
            </summary>
        </member>
        <member name="P:DCS.User.UI.UserViewModel.IsAdmin">
            <summary>
            Gets or sets the user has admin rights flag.
            </summary>
        </member>
        <member name="P:DCS.User.UI.UserViewModel.IsLoggedIn">
            <summary>
            Gets or sets the user is logged in in current session flag.
            </summary>
        </member>
        <member name="P:DCS.User.UI.UserViewModel.IsADUser">
            <summary>
            Gets or sets the user is local user flag.
            </summary>
        </member>
        <member name="P:DCS.User.UI.UserViewModel.CreationDate">
            <summary>
            Gets or sets the user creation date.
            </summary>
        </member>
        <member name="P:DCS.User.UI.UserViewModel.SubstitutionEnd">
            <summary>
            Gets or sets the user substitution ending date.
            </summary>
        </member>
        <member name="P:DCS.User.UI.UserViewModel.LastManipulation">
            <summary>
            Gets or sets the user last manipulation date.
            </summary>
        </member>
        <member name="P:DCS.User.UI.UserViewModel.ProfilePicturePath">
            <summary>
            Gets or sets the file path to the user's profile picture.
            </summary>
        </member>
        <member name="T:DCS.User.UI.GroupEditor">
            <summary>
            Interaction logic for GroupEditor.xaml
            </summary>
            <summary>
            GroupEditor
            </summary>
        </member>
        <member name="M:DCS.User.UI.GroupEditor.#ctor(DCS.User.Group)">
            <summary>
            Initializes a new instance of the <see cref="T:DCS.User.UI.GroupEditor"/> class with the specified group.
            </summary>
            <remarks>This constructor sets up the data context for the editor using a <see
            cref="T:DCS.User.UI.GroupViewModel"/> initialized with the provided <paramref name="group"/>. Ensure that the <paramref
            name="group"/> parameter is not <see langword="null"/> before calling this constructor.</remarks>
            <param name="group">The <see cref="T:DCS.User.Group"/> instance to be edited. Cannot be <see langword="null"/>.</param>
        </member>
        <member name="P:DCS.User.UI.GroupEditor.Current">
            <summary>
            Returns the current instance of the <see cref="T:DCS.User.UI.GroupViewModel"/> class as DataContext.
            </summary>
        </member>
        <member name="M:DCS.User.UI.GroupEditor.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:DCS.User.UI.GroupManagement">
            <summary>
            Interaction logic for GroupManagement.xaml
            </summary>
            <summary>
            GroupManagement
            </summary>
        </member>
        <member name="M:DCS.User.UI.GroupManagement.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DCS.User.UI.GroupManagement"/> class with the specified group.
            </summary>
        </member>
        <member name="M:DCS.User.UI.GroupManagement.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:DCS.User.UI.OrganisationEditor">
            <summary>
            Interaction logic for OrganisationEditor.xaml
            </summary>
            <summary>
            OrganisationEditor
            </summary>
        </member>
        <member name="M:DCS.User.UI.OrganisationEditor.#ctor(DCS.User.Organisation)">
            <summary>
            Initializes a new instance of the <see cref="T:DCS.User.UI.OrganisationEditor"/> class.
            </summary>
            <param name="organisation">Instance of <see cref="T:DCS.User.Organisation"/>.</param>
        </member>
        <member name="P:DCS.User.UI.OrganisationEditor.Current">
            <summary>
            Returns the current instance of the <see cref="T:DCS.User.UI.OrganisationViewModel"/> class as DataContext.
            </summary>
        </member>
        <member name="M:DCS.User.UI.OrganisationEditor.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:DCS.User.UI.OrganisationManagement">
            <summary>
            Interaction logic for OrganisationManagement.xaml
            </summary>
            <summary>
            OrganisationManagement
            </summary>
        </member>
        <member name="M:DCS.User.UI.OrganisationManagement.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DCS.User.UI.OrganisationManagement"/> class with the specified
            organisation.
            </summary>
        </member>
        <member name="M:DCS.User.UI.OrganisationManagement.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:DCS.User.UI.RoleEditor">
            <summary>
            Interaction logic for RoleEditor.xaml
            </summary>
            <summary>
            RoleEditor
            </summary>
        </member>
        <member name="M:DCS.User.UI.RoleEditor.#ctor(DCS.User.Role)">
            <summary>
            Initializes a new instance of the <see cref="T:DCS.User.UI.RoleEditor"/> class.
            </summary>
            <param name="role">Instance of <see cref="T:DCS.User.Role"/>.</param>
        </member>
        <member name="P:DCS.User.UI.RoleEditor.Current">
            <summary>
            Returns the current instance of the <see cref="T:DCS.User.UI.RoleViewModel"/> class as DataContext.
            </summary>
        </member>
        <member name="M:DCS.User.UI.RoleEditor.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:DCS.User.UI.RoleManagement">
            <summary>
            Interaction logic for RoleManagement.xaml
            </summary>
            <summary>
            RoleManagement
            </summary>
        </member>
        <member name="M:DCS.User.UI.RoleManagement.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DCS.User.UI.RoleManagement"/> class with the specified role.
            </summary>
        </member>
        <member name="M:DCS.User.UI.RoleManagement.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:DCS.User.UI.ChangeUserPassword">
            <summary>
            Interaction logic for ChangeUserPassword.xaml
            </summary>
            <summary>
            ChangeUserPassword
            </summary>
        </member>
        <member name="M:DCS.User.UI.ChangeUserPassword.#ctor(DCS.User.User)">
            <summary>
            Initializes a new instance of the <see cref="T:DCS.User.UI.ChangeUserPassword"/> class with the specified user.
            </summary>
            <param name="user">The user whose password is to be changed. Cannot be <see langword="null"/>.</param>
        </member>
        <member name="M:DCS.User.UI.ChangeUserPassword.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:DCS.User.UI.RegistrateUser">
            <summary>
            Interaction logic for RegistrateUser.xaml
            </summary>
            <summary>
            RegistrateUser
            </summary>
        </member>
        <member name="M:DCS.User.UI.RegistrateUser.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:DCS.User.UI.RegistrateUser"/> class with the specified domain name.
            </summary>
            <remarks>This constructor sets up the data context for the user registration view by creating
            a new instance of <see cref="T:DCS.User.UI.RegistrateUserViewModel"/> and associating it with the provided domain
            name.</remarks>
            <param name="domainName">The domain name to associate with the user registration process. This value is used to initialize the <see
            cref="T:DCS.User.UI.RegistrateUserViewModel"/> and set its domain context.</param>
        </member>
        <member name="P:DCS.User.UI.RegistrateUser.DomainName">
            <summary>
            Gets or sets the domain name.
            </summary>
        </member>
        <member name="P:DCS.User.UI.RegistrateUser.NewRegistratedUser">
            <summary>
            Gets or sets the new registrated user.
            </summary>
        </member>
        <member name="M:DCS.User.UI.RegistrateUser.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:DCS.User.UI.UserEditor">
            <summary>
            Represents the editor window for <see cref="T:DCS.User.User"/> instances.
            </summary>
            <summary>
            UserEditor
            </summary>
        </member>
        <member name="M:DCS.User.UI.UserEditor.#ctor(DCS.User.User)">
            <summary>
            Default constructor initialize a new <see cref="T:DCS.User.UI.UserEditor"/> window.
            </summary>
        </member>
        <member name="P:DCS.User.UI.UserEditor.Current">
            <summary>
            Returns the current instance of the <see cref="T:DCS.User.UI.UserViewModel"/> class as DataContext.
            </summary>
        </member>
        <member name="M:DCS.User.UI.UserEditor.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:DCS.User.UI.UserLogin">
            <summary>
            Interaction logic for UserLogin.xaml
            </summary>
            <summary>
            UserLogin
            </summary>
        </member>
        <member name="P:DCS.User.UI.UserLogin.DomainNames">
            <summary>
            Represents the domain names for the database connection.
            </summary>
        </member>
        <member name="M:DCS.User.UI.UserLogin.#ctor">
            <summary>
            Default constructor to initializes a new instance of <see cref="T:DCS.User.UI.UserLogin"/>.
            </summary>
        </member>
        <member name="P:DCS.User.UI.UserLogin.Current">
            <summary>
            Represents the current data context for a user instance.
            </summary>
        </member>
        <member name="P:DCS.User.UI.UserLogin.LoggedInUser">
            <summary>
            Represents the current logged in user.
            </summary>
        </member>
        <member name="P:DCS.User.UI.UserLogin.SelectedDomain">
            <summary>
            Represents the current selected database.
            </summary>
        </member>
        <member name="M:DCS.User.UI.UserLogin.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:DCS.User.UI.UserManagement">
            <summary>
            Interaction logic for UserManagement.xaml
            </summary>
            <summary>
            UserManagement
            </summary>
        </member>
        <member name="M:DCS.User.UI.UserManagement.#ctor">
            <summary>
            Default constructor for <see cref="T:DCS.User.UI.UserManagement"/>.
            </summary>
        </member>
        <member name="P:DCS.User.UI.UserManagement.Current">
            <summary>
            Returns the current instance of the <see cref="T:DCS.User.UI.UserManagementViewModel"/> class as DataContext.
            </summary>
        </member>
        <member name="M:DCS.User.UI.UserManagement.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
    </members>
</doc>
