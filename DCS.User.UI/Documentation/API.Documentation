<?xml version="1.0"?>
<doc>
    <assembly>
        <name>DCS.User.UI</name>
    </assembly>
    <members>
        <member name="T:DCS.User.UI.GroupViewModel">
            <summary>
            Represents the ViewModel for the <see cref="T:DCS.User.Group"/> model. Implements the <see cref="T:DCS.CoreLib.BaseClass.ViewModelBase`2"/> class.
            </summary>
        </member>
        <member name="M:DCS.User.UI.GroupViewModel.#ctor(DCS.User.Group)">
            <summary>
            Default constructor initialize a new instance of <see cref="T:DCS.User.UI.GroupViewModel"/>.
            </summary>
            <param name="group">Instance of <see cref="T:DCS.User.Group"/>.</param>
        </member>
        <member name="M:DCS.User.UI.GroupViewModel.CreateNewGroup">
            <summary>
            Creates a new group based on the current model and adds it to the collection if successful.
            </summary>
            <remarks>This method initializes a new group using the properties of the current <see
            cref="P:DCS.CoreLib.BaseClass.ViewModelBase`2.Model"/>. The group is then passed to the group service for creation. If the creation is successful,
            the group is added to the <see cref="P:DCS.CoreLib.BaseClass.ViewModelBase`2.Collection"/>. If the model is null or the group service fails to
            create the group, an error is logged and the method returns <see langword="false"/>.</remarks>
            <returns><see langword="true"/> if the group is successfully created and added to the collection; otherwise, <see
            langword="false"/>.</returns>
        </member>
        <member name="M:DCS.User.UI.GroupViewModel.UpdateGroup">
            <summary>
            Updates the group information based on the current model.  If the group exists, its details are updated;
            otherwise, a new group is created.
            </summary>
            <remarks>This method attempts to update an existing group identified by the <see
            cref="P:DCS.User.UI.GroupViewModel.Guid"/>.  If the group does not exist or the <see cref="P:DCS.User.UI.GroupViewModel.Guid"/> is not set, a new group is
            created  using the <see cref="M:DCS.User.UI.GroupViewModel.CreateNewGroup"/> method.  Logs an error if the update or creation process
            fails.</remarks>
            <returns><see langword="true"/> if the group was successfully updated or created; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:DCS.User.UI.GroupViewModel.GetAllActiveGroups">
            <summary>
            Gets all available active groups from the table.
            </summary>
            <returns>All avialable active groups from the table.</returns>
        </member>
        <member name="M:DCS.User.UI.GroupViewModel.GetAllGroupMember(DCS.User.Group)">
            <summary>
            Retrieves all members of the specified group.
            </summary>
            <remarks>This method queries the user assignments to determine which users belong to the
            specified group. If a user assignment references a user that cannot be retrieved, that user is
            skipped.</remarks>
            <param name="group">The group for which to retrieve the members. Cannot be <see langword="null"/>.</param>
            <returns>An <see cref="T:System.Collections.ObjectModel.ObservableCollection`1"/> of <see cref="T:DCS.User.User"/> objects representing the members of the
            specified group.  Returns an empty collection if the group has no members or if the group is <see
            langword="null"/>.</returns>
        </member>
        <member name="M:DCS.User.UI.GroupViewModel.AddUserToGroup(DCS.User.User)">
            <summary>
            Adds the specified user to the specified group.
            </summary>
            <remarks>This method attempts to add the user to the group using the underlying user
            assignment service. Ensure that both the user and group objects are valid and initialized before calling
            this method.</remarks>
            <param name="user">The user to be added to the group. Cannot be <see langword="null"/>.</param>
            <returns><see langword="true"/> if the user was successfully added to the group; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:DCS.User.UI.GroupViewModel.RemoveUserFromGroup(DCS.User.User)">
            <summary>
            Removes the specified user from the specified group.
            </summary>
            <remarks>This method checks if the user is currently assigned to the group before attempting
            to remove them. If either the user or the group is <see langword="null"/>, the method returns <see
            langword="false"/>.</remarks>
            <param name="user">The user to be removed from the group. Cannot be <see langword="null"/>.</param>
            <returns><see langword="true"/> if the user was successfully removed from the group; otherwise, <see
            langword="false"/>.</returns>
        </member>
        <member name="P:DCS.User.UI.GroupViewModel.Guid">
            <summary>
            Group unique identifier.
            </summary>
        </member>
        <member name="P:DCS.User.UI.GroupViewModel.Ident">
            <summary>
            Group ident.
            </summary>
        </member>
        <member name="P:DCS.User.UI.GroupViewModel.Name">
            <summary>
            Group name.
            </summary>
        </member>
        <member name="P:DCS.User.UI.GroupViewModel.Description">
            <summary>
            Group description.
            </summary>
        </member>
        <member name="P:DCS.User.UI.GroupViewModel.IsActive">
            <summary>
            Group is active flag.
            </summary>
        </member>
        <member name="P:DCS.User.UI.GroupViewModel.CreationDate">
            <summary>
            Group creation date.
            </summary>
        </member>
        <member name="P:DCS.User.UI.GroupViewModel.LastManipulation">
            <summary>
            Group properties last time changed date.
            </summary>
        </member>
        <member name="T:DCS.User.UI.OrganisationViewModel">
            <summary>
            Represents the view model for the <see cref="T:DCS.User.Organisation"/> model. Implements the <see cref="T:DCS.CoreLib.BaseClass.ViewModelBase`2"/> class.
            </summary>
        </member>
        <member name="M:DCS.User.UI.OrganisationViewModel.#ctor(DCS.User.Organisation)">
            <summary>
            Default constructor initialize a new instance of <see cref="T:DCS.User.UI.OrganisationViewModel"/>.
            </summary>
        </member>
        <member name="M:DCS.User.UI.OrganisationViewModel.CreateNewOrganisation">
            <summary>
            Creates a new organisation based on the current model and saves it using the organisation service.
            </summary>
            <remarks>This method initializes a new organisation with the properties specified in the
            current model, assigns a unique identifier, and sets default values for its state. The organisation is then
            persisted using the organisation service. If the model is null or an error occurs during the creation
            process, the method logs the error and returns <see langword="false"/>.</remarks>
            <returns><see langword="true"/> if the organisation is successfully created and saved; otherwise, <see
            langword="false"/>.</returns>
        </member>
        <member name="M:DCS.User.UI.OrganisationViewModel.UpdateOrganisation">
            <summary>
            Updates the organisation based on the current model. If the organisation exists, its details are updated;
            otherwise, a new organisation is created.
            </summary>
            <remarks>This method first attempts to retrieve an existing organisation using the model's
            unique identifier. If found, the organisation's details are updated. If the update fails or the organisation
            does not exist, a new organisation is created. Any errors during the update process are logged.</remarks>
            <returns><see langword="true"/> if the organisation was successfully updated or created; otherwise, <see
            langword="false"/>.</returns>
        </member>
        <member name="M:DCS.User.UI.OrganisationViewModel.GetAllOrganisationMember(DCS.User.Organisation)">
            <summary>
            Retrieves all members of the specified organisation.
            </summary>
            <remarks>This method queries the user assignments associated with the specified organisation
            and retrieves the corresponding user details.</remarks>
            <param name="organisation">The organisation for which to retrieve the members. Cannot be <see langword="null"/>.</param>
            <returns>An <see cref="T:System.Collections.ObjectModel.ObservableCollection`1"/> of <see cref="T:DCS.User.User"/> objects representing the members of the
            specified organisation.  Returns an empty collection if the organisation has no members or if the
            organisation is <see langword="null"/>.</returns>
        </member>
        <member name="M:DCS.User.UI.OrganisationViewModel.AddUserToOrganisation(DCS.User.User)">
            <summary>
            Adds the specified user to the current organization.
            </summary>
            <remarks>This method attempts to associate the specified user with the organization
            represented by the current model. Ensure that both the user and the organization are valid before calling
            this method.</remarks>
            <param name="user">The user to be added to the organization. The user must not be <see langword="null"/>.</param>
            <returns><see langword="true"/> if the user was successfully added to the organization; otherwise, <see
            langword="false"/>.</returns>
        </member>
        <member name="M:DCS.User.UI.OrganisationViewModel.RemoveUserFromOrganisation(DCS.User.User)">
            <summary>
            Removes the specified user from the current organization.
            </summary>
            <remarks>This method attempts to remove the specified user from the organization associated
            with the current model. If the user is not assigned to the organization or if the operation fails, the
            method returns <see langword="false"/>.</remarks>
            <param name="user">The user to be removed from the organization. Cannot be <see langword="null"/>.</param>
            <returns><see langword="true"/> if the user was successfully removed from the organization; otherwise, <see
            langword="false"/>.</returns>
        </member>
        <member name="P:DCS.User.UI.OrganisationViewModel.Guid">
            <summary>
            Organisation unique identifier.
            </summary>
        </member>
        <member name="P:DCS.User.UI.OrganisationViewModel.Ident">
            <summary>
            Organisation ident.
            </summary>
        </member>
        <member name="P:DCS.User.UI.OrganisationViewModel.Name">
            <summary>
            Organisation name.
            </summary>
        </member>
        <member name="P:DCS.User.UI.OrganisationViewModel.Description">
            <summary>
            Organisation description.
            </summary>
        </member>
        <member name="P:DCS.User.UI.OrganisationViewModel.IsActive">
            <summary>
            Organisation is active flag.
            </summary>
        </member>
        <member name="P:DCS.User.UI.OrganisationViewModel.CreationDate">
            <summary>
            Organisation creation date.
            </summary>
        </member>
        <member name="P:DCS.User.UI.OrganisationViewModel.LastManipulation">
            <summary>
            Organisation properties last time changed date.
            </summary>
        </member>
        <member name="T:DCS.User.UI.RoleViewModel">
            <summary>
            Represents the ViewModel for the <see cref="T:DCS.User.Role"/> model. Implements the <see cref="T:DCS.CoreLib.BaseClass.ViewModelBase`2"/> class.
            </summary>
        </member>
        <member name="M:DCS.User.UI.RoleViewModel.#ctor(DCS.User.Role)">
            <summary>
            Default constructor to initialize a new instance of <see cref="T:DCS.User.UI.RoleViewModel"/>.
            </summary>
            <param name="role">Instance of <see cref="T:DCS.User.Role"/>.</param>
        </member>
        <member name="M:DCS.User.UI.RoleViewModel.CreateNewRole">
            <summary>
            Creates a new role based on the current model and adds it to the collection or persists it using the role
            service.
            </summary>
            <remarks>This method initializes a new <see cref="T:DCS.User.Role"/> object using the properties of the
            current model. The role is marked as active and timestamps for creation and last manipulation are set to the
            current time. If the role service successfully persists the new role, the method returns <see
            langword="true"/>. Otherwise, the role is added to the collection. Logs an error if the model is <see
            langword="null"/> or if an exception occurs during the operation.</remarks>
            <returns><see langword="true"/> if the role is successfully created and persisted; otherwise, <see
            langword="false"/>.</returns>
        </member>
        <member name="M:DCS.User.UI.RoleViewModel.UpdateRole">
            <summary>
            Updates the role associated with the current model. If the role does not exist, attempts to create a new
            role.
            </summary>
            <remarks>This method retrieves the role using the GUID from the current model. If the role
            exists, it updates the role with the latest information from the model. If the role does not exist, it
            attempts to create a new role by invoking the  <see cref="M:DCS.User.UI.RoleViewModel.CreateNewRole"/> method. Any errors encountered
            during the update or creation process are logged.</remarks>
            <returns><see langword="true"/> if the role was successfully updated or created; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:DCS.User.UI.RoleViewModel.GetAllRoleMember(DCS.User.Role)">
            <summary>
            Retrieves all users assigned to the specified role.
            </summary>
            <remarks>This method queries the user assignments to find all users associated with the
            specified role.  If the role is <see langword="null"/>, an empty collection is returned.</remarks>
            <param name="role">The role for which to retrieve the assigned users. Cannot be <see langword="null"/>.</param>
            <returns>An <see cref="T:System.Collections.ObjectModel.ObservableCollection`1"/> of <see cref="T:DCS.User.User"/> objects representing the users assigned to
            the specified role.  Returns an empty collection if no users are assigned to the role or if the role is <see
            langword="null"/>.</returns>
        </member>
        <member name="M:DCS.User.UI.RoleViewModel.AddUserToRole(DCS.User.User)">
            <summary>
            Adds the specified user to the role associated with the current model.
            </summary>
            <remarks>This method attempts to assign the specified user to the role represented by the
            current model.  Ensure that both the user and the model are valid before calling this method.</remarks>
            <param name="user">The user to be added to the role. Cannot be <see langword="null"/>.</param>
            <returns><see langword="true"/> if the user was successfully added to the role; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:DCS.User.UI.RoleViewModel.RemoveUserFromRole(DCS.User.User)">
            <summary>
            Removes the specified user from the current role.
            </summary>
            <remarks>This method checks if the user is assigned to the current role and removes the
            assignment if it exists. If the user is not assigned to the role, the method returns <see
            langword="false"/>.</remarks>
            <param name="user">The user to be removed from the role. Cannot be <see langword="null"/>.</param>
            <returns><see langword="true"/> if the user was successfully removed from the role; otherwise, <see
            langword="false"/>.</returns>
        </member>
        <member name="P:DCS.User.UI.RoleViewModel.Guid">
            <summary>
            Role unique identifier.
            </summary>
        </member>
        <member name="P:DCS.User.UI.RoleViewModel.Ident">
            <summary>
            Role ident.
            </summary>
        </member>
        <member name="P:DCS.User.UI.RoleViewModel.Name">
            <summary>
            Role name.
            </summary>
        </member>
        <member name="P:DCS.User.UI.RoleViewModel.Description">
            <summary>
            Role description.
            </summary>
        </member>
        <member name="P:DCS.User.UI.RoleViewModel.IsActive">
            <summary>
            Role is active flag.
            </summary>
        </member>
        <member name="P:DCS.User.UI.RoleViewModel.CreationDate">
            <summary>
            Role creation date.
            </summary>
        </member>
        <member name="P:DCS.User.UI.RoleViewModel.LastManipulation">
            <summary>
            Role properties last time changed date.
            </summary>
        </member>
        <member name="M:DCS.User.UI.UserAssignementViewModel.#ctor(DCS.User.UserAssignement)">
            <summary>
            Initializes a new instance of the <see cref="T:DCS.User.UI.UserAssignementViewModel"/> class using the specified <see
            cref="T:DCS.User.UserAssignement"/> model.
            </summary>
            <remarks>This constructor initializes the <see cref="P:DCS.CoreLib.BaseClass.ViewModelBase`2.Model"/> property with the provided
            <paramref name="userAssignement"/>  and populates the <see cref="P:DCS.CoreLib.BaseClass.ViewModelBase`2.Collection"/> property with data retrieved
            from the service.</remarks>
            <param name="userAssignement">The <see cref="T:DCS.User.UserAssignement"/> instance that serves as the underlying model for this view model.</param>
        </member>
        <member name="M:DCS.User.UI.UserAssignementViewModel.AddUserToGroup(System.Guid,System.Guid)">
            <summary>
            Adds a user to a specified group.
            </summary>
            <remarks>This method does not throw an exception if the user is already a member of the group
            or if the group does not exist. Instead, it returns <see langword="false"/> in such cases.</remarks>
            <param name="userGuid">The unique identifier of the user to be added to the group.</param>
            <param name="groupGuid">The unique identifier of the group to which the user will be added.</param>
            <returns><see langword="true"/> if the user was successfully added to the group; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:DCS.User.UI.UserAssignementViewModel.RemoveUserFromGroup(System.Guid,System.Guid)">
            <summary>
            Removes a user from a specified group by marking the membership as ended and deleting the associated record.
            </summary>
            <remarks>This method attempts to find the user's membership in the specified group. If found,
            the membership is marked as ended, and the associated record is deleted. If the user is not a member of the
            group or an error occurs during the operation, the method logs the issue and returns <see
            langword="false"/>.</remarks>
            <param name="userGuid">The unique identifier of the user to be removed from the group. Must not be <see cref="F:System.Guid.Empty"/>.</param>
            <param name="groupGuid">The unique identifier of the group from which the user is to be removed. Must not be <see
            cref="F:System.Guid.Empty"/>.</param>
            <returns><see langword="true"/> if the user was successfully removed from the group; otherwise, <see
            langword="false"/>.</returns>
        </member>
        <member name="M:DCS.User.UI.UserAssignementViewModel.AddUserToOrganisation(System.Guid,System.Guid)">
            <summary>
            Adds a user to the specified organization.
            </summary>
            <remarks>This method does not allow duplicate user entries for the same organization. If the
            user is already a member of the specified organization, the method will return <see
            langword="false"/>.</remarks>
            <param name="userGuid">The unique identifier of the user to be added.</param>
            <param name="organisationGuid">The unique identifier of the organization to which the user will be added.</param>
            <returns><see langword="true"/> if the user was successfully added to the organization; otherwise, <see
            langword="false"/>.</returns>
        </member>
        <member name="M:DCS.User.UI.UserAssignementViewModel.RemoveUserFromOrganisation(System.Guid,System.Guid)">
            <summary>
            Removes a user from the specified organization.
            </summary>
            <remarks>This method attempts to remove the user's membership from the specified organization.
            If the user is not a member of the organization, or if an error occurs during the operation, the method logs
            the issue and returns <see langword="false"/>.</remarks>
            <param name="userGuid">The unique identifier of the user to be removed. Must not be <see cref="F:System.Guid.Empty"/>.</param>
            <param name="organisationGuid">The unique identifier of the organization from which the user is to be removed. Must not be <see
            cref="F:System.Guid.Empty"/>.</param>
            <returns><see langword="true"/> if the user was successfully removed from the organization; otherwise, <see
            langword="false"/>.</returns>
        </member>
        <member name="M:DCS.User.UI.UserAssignementViewModel.AddUserToRole(System.Guid,System.Guid)">
            <summary>
            Adds a user to a specified role.
            </summary>
            <remarks>This method associates the specified user with the specified role. If the user is
            already a member of the role,  the method returns <see langword="false"/> without making any
            changes.</remarks>
            <param name="userGuid">The unique identifier of the user to be added to the role.</param>
            <param name="roleGuid">The unique identifier of the role to which the user will be added.</param>
            <returns><see langword="true"/> if the user was successfully added to the role; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:DCS.User.UI.UserAssignementViewModel.RemoveUserFromRole(System.Guid,System.Guid)">
            <summary>
            Removes a user from a specified role.
            </summary>
            <remarks>This method attempts to remove the specified user from the specified role. If the
            user is not a member of the role,  or if an error occurs during the operation, the method logs the error and
            returns <see langword="false"/>.</remarks>
            <param name="userGuid">The unique identifier of the user to be removed from the role. Must not be <see cref="F:System.Guid.Empty"/>.</param>
            <param name="roleGuid">The unique identifier of the role from which the user will be removed. Must not be <see cref="F:System.Guid.Empty"/>.</param>
            <returns><see langword="true"/> if the user was successfully removed from the role; otherwise, <see
            langword="false"/>.</returns>
        </member>
        <member name="P:DCS.User.UI.UserAssignementViewModel.Guid">
            <summary>
            Gets or sets the unique identifier for the user assignment.
            </summary>
        </member>
        <member name="P:DCS.User.UI.UserAssignementViewModel.UserGuid">
            <summary>
            Gets or sets the unique identifier for the user.
            </summary>
        </member>
        <member name="P:DCS.User.UI.UserAssignementViewModel.GroupGuid">
            <summary>
            Gets or sets the unique identifier for the group.
            </summary>
        </member>
        <member name="P:DCS.User.UI.UserAssignementViewModel.OrganisationGuid">
            <summary>
            Gets or sets the unique identifier for the organization.
            </summary>
        </member>
        <member name="P:DCS.User.UI.UserAssignementViewModel.RoleGuid">
            <summary>
            Gets or sets the unique identifier for the role.
            </summary>
        </member>
        <member name="P:DCS.User.UI.UserAssignementViewModel.IsActive">
            <summary>
            Gets or sets a value indicating whether the user assignement is currently active.
            </summary>
        </member>
        <member name="P:DCS.User.UI.UserAssignementViewModel.CreationDate">
            <summary>
            Gets or sets the creation date of the associated model.
            </summary>
        </member>
        <member name="P:DCS.User.UI.UserAssignementViewModel.LastManipulation">
            <summary>
            Gets or sets the timestamp of the most recent modification.
            </summary>
        </member>
        <member name="P:DCS.User.UI.UserAssignementViewModel.MembershipStart">
            <summary>
            Gets or sets the start date of the membership.
            </summary>
        </member>
        <member name="P:DCS.User.UI.UserAssignementViewModel.MembershipEnd">
            <summary>
            Gets or sets the date and time when the membership ends.
            </summary>
        </member>
        <member name="T:DCS.User.UI.UserDomainViewModel">
            <summary>
            Represents a view model for an Active Directory (AD) user, providing properties and methods to manage and
            interact with the underlying <see cref="T:DCS.User.UserDomain"/> model.
            </summary>
            <remarks>This class serves as a bridge between the UI and the underlying <see cref="T:DCS.User.UserDomain"/> model,
            encapsulating the logic for creating, updating, and managing AD user data. It provides properties to access and
            modify the user's unique identifier, domain name, and active status, as well as a method to create and register
            new AD users.</remarks>
        </member>
        <member name="M:DCS.User.UI.UserDomainViewModel.#ctor(DCS.User.UserDomain)">
            <summary>
            Initializes a new instance of the <see cref="T:DCS.User.UI.UserDomainViewModel"/> class using the specified Active Directory
            user model.
            </summary>
            <remarks>This constructor sets the <see cref="P:DCS.CoreLib.BaseClass.ViewModelBase`2.Model"/> property to the provided <paramref
            name="userDomain"/> instance.</remarks>
            <param name="userDomain">The Active Directory user model used to initialize the view model. Cannot be <see langword="null"/>.</param>
        </member>
        <member name="M:DCS.User.UI.UserDomainViewModel.CreateNewDomain">
            <summary>
            Creates a new domain and its associated subscription if the domain does not already exist.
            </summary>
            <remarks>This method checks if the domain specified in the <c>Model.DomainName</c> property is
            valid and does not already exist.  If the domain is valid and does not exist, a new domain and subscription
            are created and persisted.  If the operation fails at any step, an error is logged, and the method returns
            <see langword="false"/>.</remarks>
            <returns><see langword="true"/> if the domain and subscription are successfully created; otherwise, <see
            langword="false"/>.</returns>
        </member>
        <member name="M:DCS.User.UI.UserDomainViewModel.UpdateDomain">
            <summary>
            Updates the domain information associated with the current model.
            </summary>
            <remarks>This method updates the domain details in the system if the domain exists and the
            model contains valid data. If the domain does not exist or the model's domain name is null, empty, or
            whitespace, the update operation will fail. Logs are written to capture errors or when the domain is not
            found.</remarks>
            <returns><see langword="true"/> if the domain was successfully updated; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:DCS.User.UI.UserDomainViewModel.DeleteDomain">
            <summary>
            Deletes the domain associated with the current model, if it exists.
            </summary>
            <remarks>This method attempts to delete the domain identified by the <c>Guid</c> property of
            the current model. If the domain does not exist or the deletion fails, the method logs an error and returns
            <see langword="false"/>.</remarks>
            <returns><see langword="true"/> if the domain was successfully deleted; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="P:DCS.User.UI.UserDomainViewModel.Guid">
            <summary>
            Gets or sets the unique identifier of the <see cref="T:DCS.User.UserDomain"/>.
            </summary>
        </member>
        <member name="P:DCS.User.UI.UserDomainViewModel.DomainName">
            <summary>
            Gets or sets the domain name of the <see cref="T:DCS.User.UserDomain"/>.
            </summary>
        </member>
        <member name="P:DCS.User.UI.UserDomainViewModel.SubscriptionActive">
            <summary>
            Gets or sets a value indicating whether the current <see cref="T:DCS.User.UserDomain"/> is active.
            </summary>
        </member>
        <member name="P:DCS.User.UI.UserDomainViewModel.LicenceKey">
            <summary>
            Gets or sets the license key associated with the application.
            </summary>
        </member>
        <member name="P:DCS.User.UI.UserDomainViewModel.StartSubscription">
            <summary>
            Gets or sets the start date of the subscription.
            </summary>
        </member>
        <member name="P:DCS.User.UI.UserDomainViewModel.EndSubscription">
            <summary>
            Gets or sets the date and time when the subscription ends.
            </summary>
        </member>
        <member name="T:DCS.User.UI.UserViewModel">
            <summary>
            Implements the <see cref="T:DCS.CoreLib.BaseClass.ViewModelBase`2"/> class for the <see cref="T:DCS.User.User"/> model.
            </summary>
        </member>
        <member name="F:DCS.User.UI.UserViewModel.groups">
            <summary>
            Contains all avialable user groups from the table.
            </summary>
        </member>
        <member name="F:DCS.User.UI.UserViewModel.organisations">
            <summary>
            Contains all avialable user organisations from the table.
            </summary>
        </member>
        <member name="F:DCS.User.UI.UserViewModel.roles">
            <summary>
            Contains all avialable user roles from the table.
            </summary>
        </member>
        <member name="F:DCS.User.UI.UserViewModel.userGroups">
            <summary>
            Contains all added user groups.
            </summary>
        </member>
        <member name="F:DCS.User.UI.UserViewModel.userOrganisations">
            <summary>
            Contains all added user organisations.
            </summary>
        </member>
        <member name="F:DCS.User.UI.UserViewModel.userRoles">
            <summary>
            Contains all added user roles.
            </summary>
        </member>
        <member name="F:DCS.User.UI.UserViewModel.domains">
            <summary>
            Represents a collection of user domains that can be observed for changes.
            </summary>
            <remarks>This collection is used to store and manage instances of <see cref="T:DCS.User.UserDomain"/>. 
            Changes to the collection, such as additions or removals, will raise notifications  to any observers, making
            it suitable for data binding scenarios.</remarks>
        </member>
        <member name="M:DCS.User.UI.UserViewModel.#ctor(DCS.User.User)">
            <summary>
            Initializes a new instance of the <see cref="T:DCS.User.UI.UserViewModel"/> class using the specified user.
            </summary>
            <remarks>This constructor populates the view model with data related to the specified user,
            including their groups, organizations, and roles. It also retrieves all available groups, organizations, and
            roles for reference.</remarks>
            <param name="user">The user model used to initialize the view model. Cannot be <see langword="null"/>.</param>
        </member>
        <member name="M:DCS.User.UI.UserViewModel.RefreshDomains">
            <summary>
            Refreshes the list of domains by clearing the current collection and retrieving the latest data.
            </summary>
            <remarks>This method attempts to update the domain list by invoking the domain service.  If an
            error occurs during the operation, the method logs the error and returns <see langword="false"/>.</remarks>
            <returns><see langword="true"/> if the domain list was successfully refreshed; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:DCS.User.UI.UserViewModel.RegistrateUser">
            <summary>
            Registers a new user with the specified credentials and settings.
            </summary>
            <remarks>This method attempts to create and register a user based on the current instance's
            properties. The operation will fail if the <see cref="P:DCS.User.UI.UserViewModel.Domain"/> property is null or empty, or if the user
            creation process encounters an error.</remarks>
            <returns><see langword="true"/> if the user was successfully registered; otherwise, <see langword="false"/>.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if the user creation process returns a null user object.</exception>
        </member>
        <member name="M:DCS.User.UI.UserViewModel.UpdateUser">
            <summary>
            Updates the user information in the system. If the user does not exist, attempts to create a new user.
            </summary>
            <remarks>This method first checks if the user model is valid and whether the user already
            exists in the system. If the user exists, their information is updated. If the user does not exist, a new
            user is created. Any errors encountered during the update or creation process are logged.</remarks>
            <returns><see langword="true"/> if the user was successfully updated or created; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:DCS.User.UI.UserViewModel.DeleteUser">
            <summary>
            Deletes the user associated with the current model.
            </summary>
            <remarks>This method attempts to delete the user identified by its <see cref="P:DCS.User.UI.UserViewModel.Guid"/>
            property. If the deletion is successful, a warning log entry is created. If the deletion fails or an
            exception occurs, an error log entry is created, and the method returns <see langword="false"/>.</remarks>
            <returns><see langword="true"/> if the user was successfully deleted; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:DCS.User.UI.UserViewModel.LoginUser">
            <summary>
            Attempts to log in a user based on the provided user model and credentials.
            </summary>
            <remarks>This method verifies the user's credentials by comparing the provided username,
            password, and domain against the stored user data. If the credentials are valid, the user is set as the
            current user in the system.</remarks>
            <returns><see langword="true"/> if the login is successful; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:DCS.User.UI.UserViewModel.SetUserProfilePicture">
            <summary>
            Opens a file dialog to allow the user to select an image file and sets the selected file  as the user's
            profile picture.
            </summary>
            <remarks>The file dialog filters for common image file formats, including .jpg, .jpeg, .png,
            .gif, and .bmp. If a file is selected, the profile picture path is updated and a property change
            notification is raised.</remarks>
            <returns><see langword="true"/> if the user successfully selects an image file; otherwise,  <see langword="false"/>.</returns>
        </member>
        <member name="M:DCS.User.UI.UserViewModel.AddUserToGroup(DCS.User.Group)">
            <summary>
            Adds the current user to the specified group.
            </summary>
            <remarks>This method checks if the user is already a member of the specified group before
            attempting to add them. If the user is already a member or if the operation fails, the method returns <see
            langword="false"/>.</remarks>
            <param name="group">The group to which the user will be added. Cannot be <see langword="null"/>.</param>
            <returns><see langword="true"/> if the user was successfully added to the group; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:DCS.User.UI.UserViewModel.RemoveUserFromGroup(DCS.User.Group)">
            <summary>
            Removes the current user from the specified group.
            </summary>
            <remarks>This method checks if the user is a member of the specified group and attempts to
            remove the user from it. The operation will fail if the group is not found, the user is not a member of the
            group, or if the removal process encounters an issue.</remarks>
            <param name="group">The group from which the user should be removed. Cannot be <see langword="null"/>.</param>
            <returns><see langword="true"/> if the user was successfully removed from the group; otherwise, <see
            langword="false"/>.</returns>
        </member>
        <member name="M:DCS.User.UI.UserViewModel.GetUserGroups(DCS.User.User)">
            <summary>
            Retrieves the collection of groups associated with the specified user.
            </summary>
            <remarks>This method filters the user's group assignments based on valid group identifiers and
            retrieves the corresponding group objects from the available groups. If a group associated with the user
            cannot be found, it is skipped.</remarks>
            <param name="user">The user whose groups are to be retrieved. Cannot be <see langword="null"/>.</param>
            <returns>An <see cref="T:System.Collections.ObjectModel.ObservableCollection`1"/> of <see cref="T:DCS.User.Group"/> objects representing the groups the
            specified user is assigned to. Returns an empty collection if the user is not assigned to any groups or if
            <paramref name="user"/> is <see langword="null"/>.</returns>
        </member>
        <member name="M:DCS.User.UI.UserViewModel.AddUserToOrganisation(DCS.User.Organisation)">
            <summary>
            Adds the current user to the specified organisation.
            </summary>
            <remarks>This method ensures that the user is not already a member of the specified
            organisation before attempting to add them. The operation will fail if the organisation is <see
            langword="null"/> or if the user is already associated with the organisation.</remarks>
            <param name="organisation">The organisation to which the user will be added. Cannot be <see langword="null"/>.</param>
            <returns><see langword="true"/> if the user was successfully added to the organisation; otherwise, <see
            langword="false"/>.</returns>
        </member>
        <member name="M:DCS.User.UI.UserViewModel.RemoveUserFromOrganisation(DCS.User.Organisation)">
            <summary>
            Removes the current user from the specified organisation.
            </summary>
            <remarks>This method checks if the user is associated with the specified organisation and, if
            so,  attempts to remove the user. The operation will fail if the user is not associated with the 
            organisation or if the removal process encounters an issue.</remarks>
            <param name="organisation">The organisation from which the user should be removed. Cannot be <see langword="null"/>.</param>
            <returns><see langword="true"/> if the user was successfully removed from the organisation;  otherwise, <see
            langword="false"/>.</returns>
        </member>
        <member name="M:DCS.User.UI.UserViewModel.GetUserOrganisations(DCS.User.User)">
            <summary>
            Retrieves a collection of organisations associated with the specified user.
            </summary>
            <remarks>This method filters organisations based on the user's assignments, ensuring that only
            valid organisations  with non-empty GUIDs are included in the result.</remarks>
            <param name="user">The user whose associated organisations are to be retrieved. Cannot be <see langword="null"/>.</param>
            <returns>An <see cref="T:System.Collections.ObjectModel.ObservableCollection`1"/> of <see cref="T:DCS.User.Organisation"/> objects representing the
            organisations  linked to the specified user. Returns an empty collection if the user has no associated
            organisations or if  <paramref name="user"/> is <see langword="null"/>.</returns>
        </member>
        <member name="M:DCS.User.UI.UserViewModel.AddUserToRole(DCS.User.Role)">
            <summary>
            Adds the specified role to the user if it is not already assigned.
            </summary>
            <remarks>This method checks if the role is not already assigned to the user before attempting
            to add it.  If the role is successfully added, it is also added to the local collection of user
            roles.</remarks>
            <param name="role">The role to assign to the user. Cannot be <see langword="null"/>.</param>
            <returns><see langword="true"/> if the role was successfully added to the user;  otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:DCS.User.UI.UserViewModel.RemoveUserFromRole(DCS.User.Role)">
            <summary>
            Removes the specified role from the current user.
            </summary>
            <remarks>This method attempts to remove the specified role from the current user. The
            operation will fail if: <list type="bullet"> <item><description>The <paramref name="role"/> is not assigned
            to the user.</description></item> <item><description>The role or user data cannot be retrieved or updated
            due to an internal issue.</description></item> </list> Ensure that the <paramref name="role"/> parameter is
            not <see langword="null"/> before calling this method.</remarks>
            <param name="role">The role to be removed from the user. Cannot be <see langword="null"/>.</param>
            <returns><see langword="true"/> if the role was successfully removed from the user; otherwise, <see
            langword="false"/>.</returns>
        </member>
        <member name="M:DCS.User.UI.UserViewModel.GetUserRoles(DCS.User.User)">
            <summary>
            Retrieves the roles assigned to the specified user.
            </summary>
            <remarks>This method filters roles based on the user's assignments and excludes any roles with
            an empty GUID. The returned collection is dynamically observable, meaning changes to the collection will
            notify any bound UI or listeners.</remarks>
            <param name="user">The user for whom to retrieve roles. Cannot be <see langword="null"/>.</param>
            <returns>An <see cref="T:System.Collections.ObjectModel.ObservableCollection`1"/> of <see cref="T:DCS.User.Role"/> objects representing the roles assigned to
            the user. If the user has no roles or if <paramref name="user"/> is <see langword="null"/>, an empty
            collection is returned.</returns>
        </member>
        <member name="P:DCS.User.UI.UserViewModel.AllGroups">
            <summary>
            Contains all avialable user groups from the table.
            </summary>
        </member>
        <member name="P:DCS.User.UI.UserViewModel.UserGroups">
            <summary>
            Contains all added user groups.
            </summary>
        </member>
        <member name="P:DCS.User.UI.UserViewModel.AllOrganisations">
            <summary>
            Contains all avialable user organisations from the table.
            </summary>
        </member>
        <member name="P:DCS.User.UI.UserViewModel.UserOrganisations">
            <summary>
            Contains all added user organisations.
            </summary>
        </member>
        <member name="P:DCS.User.UI.UserViewModel.AllRoles">
            <summary>
            Contains all avialable user roles from the table.
            </summary>
        </member>
        <member name="P:DCS.User.UI.UserViewModel.UserRoles">
            <summary>
            Contains all added user roles.
            </summary>
        </member>
        <member name="P:DCS.User.UI.UserViewModel.Domains">
            <summary>
            Gets or sets the collection of user domains associated with the current context.
            </summary>
        </member>
        <member name="P:DCS.User.UI.UserViewModel.Guid">
            <summary>
            Gets or sets the unique identifier for the user.
            </summary>
        </member>
        <member name="P:DCS.User.UI.UserViewModel.UserName">
            <summary>
            Gets or sets the user name.
            </summary>
        </member>
        <member name="P:DCS.User.UI.UserViewModel.PassWord">
            <summary>
            Gets or sets the user password.
            </summary>
        </member>
        <member name="P:DCS.User.UI.UserViewModel.Domain">
            <summary>
            Gets or sets the user domain name.
            </summary>
        </member>
        <member name="P:DCS.User.UI.UserViewModel.IsActive">
            <summary>
            Gets or sets the user is admin flag.
            </summary>
        </member>
        <member name="P:DCS.User.UI.UserViewModel.KeepLoggedIn">
            <summary>
            Gets or sets the user keep logged in flag.
            </summary>
        </member>
        <member name="P:DCS.User.UI.UserViewModel.IsAdmin">
            <summary>
            Gets or sets the user has admin rights flag.
            </summary>
        </member>
        <member name="P:DCS.User.UI.UserViewModel.IsADUser">
            <summary>
            Gets or sets the user is local user flag.
            </summary>
        </member>
        <member name="P:DCS.User.UI.UserViewModel.CreationDate">
            <summary>
            Gets or sets the user creation date.
            </summary>
        </member>
        <member name="P:DCS.User.UI.UserViewModel.SubstitutionEnd">
            <summary>
            Gets or sets the user substitution ending date.
            </summary>
        </member>
        <member name="P:DCS.User.UI.UserViewModel.LastManipulation">
            <summary>
            Gets or sets the user last manipulation date.
            </summary>
        </member>
        <member name="P:DCS.User.UI.UserViewModel.ProfilePicturePath">
            <summary>
            Gets or sets the file path to the user's profile picture.
            </summary>
        </member>
        <member name="T:DCS.User.UI.GroupEditor">
            <summary>
            Interaction logic for GroupEditor.xaml
            </summary>
            <summary>
            GroupEditor
            </summary>
        </member>
        <member name="M:DCS.User.UI.GroupEditor.#ctor(DCS.User.Group)">
            <summary>
            Initializes a new instance of the <see cref="T:DCS.User.UI.GroupEditor"/> class with the specified group.
            </summary>
            <remarks>This constructor sets up the data context for the editor using a <see
            cref="T:DCS.User.UI.GroupViewModel"/> initialized with the provided <paramref name="group"/>. Ensure that the <paramref
            name="group"/> parameter is not <see langword="null"/> before calling this constructor.</remarks>
            <param name="group">The <see cref="T:DCS.User.Group"/> instance to be edited. Cannot be <see langword="null"/>.</param>
        </member>
        <member name="P:DCS.User.UI.GroupEditor.Current">
            <summary>
            Returns the current instance of the <see cref="T:DCS.User.UI.GroupViewModel"/> class as DataContext.
            </summary>
        </member>
        <member name="M:DCS.User.UI.GroupEditor.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:DCS.User.UI.GroupManagement">
            <summary>
            Interaction logic for GroupManagement.xaml
            </summary>
            <summary>
            GroupManagement
            </summary>
        </member>
        <member name="M:DCS.User.UI.GroupManagement.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DCS.User.UI.GroupManagement"/> class with the specified group.
            </summary>
        </member>
        <member name="M:DCS.User.UI.GroupManagement.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:DCS.User.UI.OrganisationEditor">
            <summary>
            Interaction logic for OrganisationEditor.xaml
            </summary>
            <summary>
            OrganisationEditor
            </summary>
        </member>
        <member name="M:DCS.User.UI.OrganisationEditor.#ctor(DCS.User.Organisation)">
            <summary>
            Initializes a new instance of the <see cref="T:DCS.User.UI.OrganisationEditor"/> class.
            </summary>
            <param name="organisation">Instance of <see cref="T:DCS.User.Organisation"/>.</param>
        </member>
        <member name="P:DCS.User.UI.OrganisationEditor.Current">
            <summary>
            Returns the current instance of the <see cref="T:DCS.User.UI.OrganisationViewModel"/> class as DataContext.
            </summary>
        </member>
        <member name="M:DCS.User.UI.OrganisationEditor.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:DCS.User.UI.OrganisationManagement">
            <summary>
            Interaction logic for OrganisationManagement.xaml
            </summary>
            <summary>
            OrganisationManagement
            </summary>
        </member>
        <member name="M:DCS.User.UI.OrganisationManagement.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DCS.User.UI.OrganisationManagement"/> class with the specified
            organisation.
            </summary>
        </member>
        <member name="M:DCS.User.UI.OrganisationManagement.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:DCS.User.UI.RoleEditor">
            <summary>
            Interaction logic for RoleEditor.xaml
            </summary>
            <summary>
            RoleEditor
            </summary>
        </member>
        <member name="M:DCS.User.UI.RoleEditor.#ctor(DCS.User.Role)">
            <summary>
            Initializes a new instance of the <see cref="T:DCS.User.UI.RoleEditor"/> class.
            </summary>
            <param name="role">Instance of <see cref="T:DCS.User.Role"/>.</param>
        </member>
        <member name="P:DCS.User.UI.RoleEditor.Current">
            <summary>
            Returns the current instance of the <see cref="T:DCS.User.UI.RoleViewModel"/> class as DataContext.
            </summary>
        </member>
        <member name="M:DCS.User.UI.RoleEditor.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:DCS.User.UI.RoleManagement">
            <summary>
            Interaction logic for RoleManagement.xaml
            </summary>
            <summary>
            RoleManagement
            </summary>
        </member>
        <member name="M:DCS.User.UI.RoleManagement.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DCS.User.UI.RoleManagement"/> class with the specified role.
            </summary>
        </member>
        <member name="M:DCS.User.UI.RoleManagement.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:DCS.User.UI.ChangeUserPassword">
            <summary>
            Interaction logic for ChangeUserPassword.xaml
            </summary>
            <summary>
            ChangeUserPassword
            </summary>
        </member>
        <member name="M:DCS.User.UI.ChangeUserPassword.#ctor(DCS.User.User)">
            <summary>
            Initializes a new instance of the <see cref="T:DCS.User.UI.ChangeUserPassword"/> class with the specified user.
            </summary>
            <param name="user">The user whose password is to be changed. Cannot be <see langword="null"/>.</param>
        </member>
        <member name="M:DCS.User.UI.ChangeUserPassword.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:DCS.User.UI.CreateNewUserDomain">
            <summary>
            Interaction logic for CreateNewADUserDomain.xaml
            </summary>
            <summary>
            CreateNewUserDomain
            </summary>
        </member>
        <member name="M:DCS.User.UI.CreateNewUserDomain.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DCS.User.UI.CreateNewUserDomain"/> class.
            </summary>
            <remarks>This constructor sets up the data context for the view by creating a new instance of 
            <see cref="T:DCS.User.UserDomain"/> and initializing the associated <see cref="T:DCS.User.UI.UserDomainViewModel"/>.</remarks>
        </member>
        <member name="P:DCS.User.UI.CreateNewUserDomain.Current">
            <summary>
            Gets the current <see cref="T:DCS.User.UI.UserDomainViewModel"/> instance associated with the data context.
            </summary>
        </member>
        <member name="M:DCS.User.UI.CreateNewUserDomain.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:DCS.User.UI.RegistrateUser">
            <summary>
            Interaction logic for RegistrateUser.xaml
            </summary>
            <summary>
            RegistrateUser
            </summary>
        </member>
        <member name="M:DCS.User.UI.RegistrateUser.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:DCS.User.UI.RegistrateUser"/> class with the specified domain name.
            </summary>
            <remarks>This constructor sets up the data context for the user registration view by creating
            a new instance of <see cref="T:DCS.User.UI.UserViewModel"/> and associating it with the provided domain
            name.</remarks>
        </member>
        <member name="P:DCS.User.UI.RegistrateUser.Current">
            <summary>
            Gets the current user view model associated with the data context.
            </summary>
        </member>
        <member name="M:DCS.User.UI.RegistrateUser.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:DCS.User.UI.UserEditor">
            <summary>
            Represents the editor window for <see cref="T:DCS.User.User"/> instances.
            </summary>
            <summary>
            UserEditor
            </summary>
        </member>
        <member name="M:DCS.User.UI.UserEditor.#ctor(DCS.User.User)">
            <summary>
            Default constructor initialize a new <see cref="T:DCS.User.UI.UserEditor"/> window.
            </summary>
        </member>
        <member name="P:DCS.User.UI.UserEditor.Current">
            <summary>
            Returns the current instance of the <see cref="T:DCS.User.UI.UserViewModel"/> class as DataContext.
            </summary>
        </member>
        <member name="M:DCS.User.UI.UserEditor.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:DCS.User.UI.UserLogin">
            <summary>
            Interaction logic for UserLogin.xaml
            </summary>
            <summary>
            UserLogin
            </summary>
        </member>
        <member name="M:DCS.User.UI.UserLogin.#ctor">
            <summary>
            Default constructor to initializes a new instance of <see cref="T:DCS.User.UI.UserLogin"/>.
            </summary>
        </member>
        <member name="P:DCS.User.UI.UserLogin.Current">
            <summary>
            Gets the current user view model as data context.
            </summary>
        </member>
        <member name="M:DCS.User.UI.UserLogin.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
        <member name="T:DCS.User.UI.UserManagement">
            <summary>
            Interaction logic for UserManagement.xaml
            </summary>
            <summary>
            UserManagement
            </summary>
        </member>
        <member name="M:DCS.User.UI.UserManagement.#ctor">
            <summary>
            Default constructor for <see cref="T:DCS.User.UI.UserManagement"/>.
            </summary>
        </member>
        <member name="P:DCS.User.UI.UserManagement.Current">
            <summary>
            Returns the current instance of the <see cref="T:DCS.User.UI.UserViewModel"/> class as DataContext.
            </summary>
        </member>
        <member name="M:DCS.User.UI.UserManagement.InitializeComponent">
            <summary>
            InitializeComponent
            </summary>
        </member>
    </members>
</doc>
